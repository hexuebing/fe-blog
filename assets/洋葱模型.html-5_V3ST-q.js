import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,f as t}from"./app-_U6zM50y.js";const p={},o=t(`<h1 id="koa-洋葱模型" tabindex="-1"><a class="header-anchor" href="#koa-洋葱模型" aria-hidden="true">#</a> koa 洋葱模型</h1><p>Koa 的洋葱模型是其核心设计模式，通过中间件的分层处理机制实现请求和响应的双向控制。其核心特征是以 <code>next()</code> 方法为分界点，先由外到内执行请求逻辑（Request），再由内到外执行响应逻辑（Response），形成类似洋葱的层级执行顺序[1][3][5]。</p><hr><p>洋葱模型执行原理 中间件分层：每个中间件通过 <code>next()</code> 分为上下两部分：</p><ul><li><code>next()</code> 前：处理请求阶段（外层到内层）</li><li><code>next()</code> 后：处理响应阶段（内层到外层） 执行顺序：<br> 假设有两个中间件，执行顺序为：<br><code>中间件1请求 → 中间件2请求 → 中间件2响应 → 中间件1响应</code><br> 输出结果类似 <code>1 → 3 → 4 → 2</code>[1][3][5]。</li></ul><hr><p>代码实现 以下是一个简化的洋葱模型实现，包含中间件组合逻辑：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 中间件组合函数（核心）</span>
<span class="token keyword">function</span> <span class="token function">compose</span><span class="token punctuation">(</span><span class="token parameter">middlewares</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">ctx</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token function-variable function">dispatch</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> middlewares<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> middleware <span class="token operator">=</span> middlewares<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token comment">// 递归调用下一个中间件</span>
      <span class="token keyword">return</span> <span class="token function">middleware</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">dispatch</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 示例中间件</span>
<span class="token keyword">const</span> <span class="token function-variable function">middleware1</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;1-Request&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 进入下一个中间件</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;1-Response&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">middleware2</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;2-Request&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 进入下一个中间件（若无则返回）</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;2-Response&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 组合并执行中间件</span>
<span class="token keyword">const</span> ctx <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 模拟上下文对象</span>
<span class="token keyword">const</span> run <span class="token operator">=</span> <span class="token function">compose</span><span class="token punctuation">(</span><span class="token punctuation">[</span>middleware1<span class="token punctuation">,</span> middleware2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">run</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;执行完毕&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 输出顺序：</span>
<span class="token comment">// 1-Request → 2-Request → 2-Response → 1-Response → 执行完毕</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>关键点解析 <code>compose</code> 函数：递归组合中间件，通过 <code>dispatch</code> 按顺序执行每个中间件的 <code>next()</code>[1][6]。 <code>async/await</code> 作用：确保中间件暂停执行并等待后续中间件完成，避免同步代码导致顺序混乱[3][7]。 应用场景：适用于日志记录、错误处理、权限校验等需要双向控制的逻辑[1][8]。</p><hr><p>对比传统模型</p><table><thead><tr><th>特性</th><th>洋葱模型</th><th>传统线性模型</th></tr></thead><tbody><tr><td>执行方向</td><td>双向（请求+响应）</td><td>单向（仅请求）</td></tr><tr><td>中间件通信</td><td>通过上下文 <code>ctx</code> 共享</td><td>依赖全局变量或参数</td></tr><tr><td>扩展性</td><td>高（灵活组合）</td><td>低（顺序固定）</td></tr></tbody></table><p>通过洋葱模型，Koa 实现了中间件的高效协作，开发者可以更灵活地控制请求和响应流程[7][9]。</p>`,14),e=[o];function c(l,u){return s(),a("div",null,e)}const d=n(p,[["render",c],["__file","洋葱模型.html.vue"]]);export{d as default};
