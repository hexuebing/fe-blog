import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as t,o as p,c as o,a as n,b as s,d as i,f as l}from"./app-o5XhJQLA.js";const c={},r=n("h1",{id:"rollup-babel打包js库",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#rollup-babel打包js库","aria-hidden":"true"},"#"),s(" Rollup + Babel打包JS库")],-1),d={href:"https://luo3.org.cn/posts/learn/develop-and-distributing-js-library-using-rollup-and-babel/#%E9%85%8D%E7%BD%AE-babel",target:"_blank",rel:"noopener noreferrer"},u=l(`<h2 id="初始化项目" tabindex="-1"><a class="header-anchor" href="#初始化项目" aria-hidden="true">#</a> 初始化项目</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> init
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="配置babel" tabindex="-1"><a class="header-anchor" href="#配置babel" aria-hidden="true">#</a> 配置Babel</h2><p>安装Babel和TS</p><ul><li><code>@babel/core</code> Babel 核心包</li><li><code>@babel/cli</code> Babel 命令行工具</li><li><code>@babel/preset-env</code> Babel 兼容性整合包</li><li><code>@babel/preset-typescript</code> Babel TypeScript 整合包</li><li><code>typescript</code> TypeScript 编译器工具</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> <span class="token function">add</span> <span class="token parameter variable">-D</span> @babel/core @babel/cli @babel/preset-env @babel/preset-typescript typescript

<span class="token comment"># 安装完毕后，初始化 TS 配置</span>
<span class="token function">yarn</span> tsc <span class="token parameter variable">--init</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置<code>babel.config.json</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token string-property property">&quot;presets&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;@babel/preset-env&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;@babel/preset-typescript&quot;</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试配置生效与否：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> fn<span class="token operator">:</span> <span class="token function-variable function">Function</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Babel 默认<strong>只编译 JS 代码</strong>，所以要增加参数 <code>--extensions</code> 让 Babel 识别 TS</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> babel <span class="token parameter variable">--extensions</span> <span class="token string">&#39;.ts&#39;</span> ./index.ts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="源码" tabindex="-1"><a class="header-anchor" href="#源码" aria-hidden="true">#</a> 源码</h2><p><code>src/utils.ts</code></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token doc-comment comment">/** 保留N位小数，不执行四舍五入，保留0位小数=取整 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">formatDecimal</span><span class="token punctuation">(</span>dec<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> fixes<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">//...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>src/unit-transform.ts</code></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> formatDecimal <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./utils&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">TransformOptions</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  scale<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  unit<span class="token operator">:</span> <span class="token string">&#39;c&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;f&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createUnitTransform</span><span class="token punctuation">(</span>opts<span class="token operator">:</span> TransformOptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">//...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>入口文件<code>src/index.ts</code></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">&#39;./utils&#39;</span>
<span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">&#39;./unit-transform&#39;</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> createUnitTransform <span class="token keyword">as</span> <span class="token keyword">default</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./unit-transform&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对开发者而言，这样更方便使用</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// import { formatDecimal, createUnitTransform } from &#39;unit-transform&#39;</span>
<span class="token comment">// import createUnitTransform from &#39;unit-transform&#39; 这里等同于 default</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="进行打包输出" tabindex="-1"><a class="header-anchor" href="#进行打包输出" aria-hidden="true">#</a> 进行打包输出</h2><h3 id="babel编译cjs" tabindex="-1"><a class="header-anchor" href="#babel编译cjs" aria-hidden="true">#</a> Babel编译CJS</h3><p><code>babel.config.json</code> 只能配置单个输出，为了能针对特定的配置而生成不同的代码，这里要用到 <code>.babelrc.json</code> 配置文件，它的格式和 <code>babel.config.json</code> 一样。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;presets&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;@babel/preset-env&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;@babel/preset-typescript&quot;</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>显式指定配置，目标位置 <code>dist/cjs</code>，编译 <code>src/</code> 的代码，同时生成 SourceMap</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> babel --config-file ./.babelrc.cjs.json <span class="token parameter variable">--extensions</span> <span class="token string">&#39;.ts&#39;</span> <span class="token parameter variable">-d</span> dist/cjs/ src/

<span class="token comment"># 编译完毕，会在 dist/cjs 看到结果</span>
<span class="token comment"># dist/cjs/index.js 由于是 CJS 格式，可以通过 node 命令行直接引用</span>
<span class="token comment"># 例子: node -e &#39;console.log(require(&quot;./dist/cjs&quot;))</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="babel编译esm" tabindex="-1"><a class="header-anchor" href="#babel编译esm" aria-hidden="true">#</a> Babel编译ESM</h3><p>如果不用 TypeScript，源代码就是一份 ES Module 格式的代码,所以 Babel 在这里再编译一次可以视为仅仅把 TypeScript 转换成 JavaScript。</p><p><code>.babelrc.esm.json</code>配置文件：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;presets&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">[</span><span class="token string">&quot;@babel/preset-env&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;modules&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string">&quot;@babel/preset-typescript&quot;</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>显式指定配置，目标位置 <code>dist/esm</code>，编译 <code>src/</code> 的代码，同时生成 SourceMap</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> babel --config-file ./.babelrc.esm.json <span class="token parameter variable">--extensions</span> <span class="token string">&#39;.ts&#39;</span> --source-maps <span class="token parameter variable">-d</span> dist/esm/ src/

<span class="token comment"># 编译完毕，会在 dist/esm 看到结果</span>
<span class="token comment"># dist/esm 并不是兼容 Node 的版本，所以只能通过支持 ESM 的工具识别，如: webpack</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="rollup-babel打包umd" tabindex="-1"><a class="header-anchor" href="#rollup-babel打包umd" aria-hidden="true">#</a> Rollup+Babel打包UMD</h3><p>安装Rollup：</p><ul><li><code>rollup</code> Rollup 核心包</li><li><code>@rollup/plugin-node-resolve</code> 能让 Rollup 引用其他模块的插件</li><li><code>@rollup/plugin-babel</code> 能让 Rollup 借助 Babel 编译的插件</li><li><code>@rollup/plugin-typescript</code> 能让 Rollup 启动时读取 TypeScript 配置文件</li><li><code>rollup-plugin-terser</code> 能让 Rollup 对输出结果进行 Terser 压缩的插件</li><li><code>rollup-plugin-bundle-size</code> 能让 Rollup 显示 gzip 压缩前后代码大小的插件</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> <span class="token function">add</span> <span class="token parameter variable">-D</span> rollup @rollup/plugin-node-resolve @rollup/plugin-babel @rollup/plugin-typescript rollup-plugin-terser rollup-plugin-bundle-size
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Rollup 可以支持 TypeScript，故直接使用 TypeScript 编写配置，避开不必要的错误 新建<code>rollup.config.ts</code></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;rollup&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> nodeResolve <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@rollup/plugin-node-resolve&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> babel <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@rollup/plugin-babel&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> terser <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;rollup-plugin-terser&#39;</span>
<span class="token comment">// @ts-ignore</span>
<span class="token keyword">import</span> bundleSize <span class="token keyword">from</span> <span class="token string">&#39;rollup-plugin-bundle-size&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  input<span class="token operator">:</span> <span class="token string">&#39;./src/index.ts&#39;</span><span class="token punctuation">,</span>
  output<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      file<span class="token operator">:</span> <span class="token string">&#39;./dist/unit_transform.umd.js&#39;</span><span class="token punctuation">,</span>
      format<span class="token operator">:</span> <span class="token string">&#39;umd&#39;</span><span class="token punctuation">,</span>
      name<span class="token operator">:</span> <span class="token string">&#39;unit_transform&#39;</span><span class="token punctuation">,</span> <span class="token comment">// umd 导出的名称</span>
      sourcemap<span class="token operator">:</span> <span class="token string">&#39;inline&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 把 SourceMap 写在目标代码里面</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      file<span class="token operator">:</span> <span class="token string">&#39;./dist/unit_transform.umd.min.js&#39;</span><span class="token punctuation">,</span>
      format<span class="token operator">:</span> <span class="token string">&#39;umd&#39;</span><span class="token punctuation">,</span>
      name<span class="token operator">:</span> <span class="token string">&#39;unit_transform&#39;</span><span class="token punctuation">,</span>
      plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">terser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment">//经过 Terser 压缩的 UMD 代码</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token function">bundleSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// e.g. 命令行附带 unit_transform.umd.js: 2.91 kB → 923 B (gzip)</span>
    <span class="token function">nodeResolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span> extensions<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;.ts&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">babel</span><span class="token punctuation">(</span><span class="token punctuation">{</span> extensions<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;.ts&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>@rollup/plugin-babel</code> 在 Rollup 运行时会读取 Babel 默认配置文件，如根目录的 <code>babel.config.json</code></p><p>注意 <code>nodeResolve</code> 和 <code>babel</code>，甚至 <code>Rollup</code> 本身只识别 <code>.js 代码</code>，对于 TypeScript 项目，要配置 <code>extensions</code> 让它们识别 <code>TS 文件</code>。</p><p>执行打包</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> rollup <span class="token parameter variable">-c</span> rollup.config.ts <span class="token parameter variable">--configPlugin</span> typescript

<span class="token comment"># 打包完成，在 dist/ 看到结果</span>
<span class="token comment"># 挑其中一份 UMD 代码，复制到浏览器 Console 执行</span>
<span class="token comment"># 即可通过 unit_transform、window.unit_transform 调用模块</span>
<span class="token comment"># 其中变量 unit_transform 即是 UMD 导出的名称</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="生成-d-ts类型声明文件" tabindex="-1"><a class="header-anchor" href="#生成-d-ts类型声明文件" aria-hidden="true">#</a> 生成<code>.d.ts</code>类型声明文件</h2><p>修改<code>tsconfig.json</code></p><ul><li><p><code>rootDir</code> 相对于 src/ 生成</p></li><li><p><code>declaration</code> 启用生成 .d.ts</p></li><li><p><code>emitDeclarationOnly</code> 仅生成 .d.ts ，不生成JS (JS 部分已经由 Babel 生成了)</p></li><li><p><code>declarationDir</code> 生成 .d.ts 的目标目录</p></li><li><p><code>include</code> 仅对 src/ 内的 TS 生成 .d.ts (编译器将专注 src/ 生成，忽略根目录和测试目录的 TS 文件)</p></li></ul><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    ...
+   <span class="token property">&quot;rootDir&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./src&quot;</span><span class="token punctuation">,</span>
+   <span class="token property">&quot;declaration&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
+   <span class="token property">&quot;emitDeclarationOnly&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
+   <span class="token property">&quot;declarationDir&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./dist/types&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
+ <span class="token property">&quot;include&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;./src&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> tsc

<span class="token comment"># 生成完毕，结果存放 dist/types </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="生成cjs根入口" tabindex="-1"><a class="header-anchor" href="#生成cjs根入口" aria-hidden="true">#</a> 生成CJS根入口</h2><p>根目录增加index.js</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 在此之前，CommonJS 需要包名和路径引用:</span>
<span class="token comment">// const unit_transform = require(&#39;unit_transform/dist/cjs&#39;)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./dist/cjs&#39;</span><span class="token punctuation">)</span>
module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>default <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./dist/cjs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>default
<span class="token comment">// 此时，CommonJS 可以通过包名直接引用:</span>
<span class="token comment">// const unit_transform = require(&#39;unit_transform&#39;)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同时应该把入口写在 package.json 里面:</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  ...
+ <span class="token property">&quot;main&quot;</span><span class="token operator">:</span> <span class="token string">&quot;dist/cjs/index.js&quot;</span><span class="token punctuation">,</span>
  ...
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="生成esm根入口" tabindex="-1"><a class="header-anchor" href="#生成esm根入口" aria-hidden="true">#</a> 生成ESM根入口</h2><p>对于 ES Module，webpack 会读取 package.json 中的 module 作为模块入口。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  ...
  <span class="token property">&quot;main&quot;</span><span class="token operator">:</span> <span class="token string">&quot;dist/cjs/index.js&quot;</span><span class="token punctuation">,</span>
+ <span class="token property">&quot;module&quot;</span><span class="token operator">:</span> <span class="token string">&quot;dist/esm/index.js&quot;</span><span class="token punctuation">,</span>
+ <span class="token property">&quot;sideEffects&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  ...
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="生成类型声明入口" tabindex="-1"><a class="header-anchor" href="#生成类型声明入口" aria-hidden="true">#</a> 生成类型声明入口</h2><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  ...
  <span class="token property">&quot;main&quot;</span><span class="token operator">:</span> <span class="token string">&quot;dist/cjs/index.js&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;module&quot;</span><span class="token operator">:</span> <span class="token string">&quot;dist/esm/index.js&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;sideEffects&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
+ <span class="token property">&quot;types&quot;</span><span class="token operator">:</span> <span class="token string">&quot;dist/types/index.d.ts&quot;</span><span class="token punctuation">,</span>
  ...
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="为husky增加配置" tabindex="-1"><a class="header-anchor" href="#为husky增加配置" aria-hidden="true">#</a> 为Husky增加配置</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> husky <span class="token function">add</span> .husky/pre-commit <span class="token string">&quot;yarn build &amp;&amp; git add dist/&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,61);function v(k,m){const a=t("ExternalLinkIcon");return p(),o("div",null,[r,n("p",null,[n("a",d,[s("原文连接"),i(a)])]),u])}const h=e(c,[["render",v],["__file","Rollup_Babel打包JS库.html.vue"]]);export{h as default};
