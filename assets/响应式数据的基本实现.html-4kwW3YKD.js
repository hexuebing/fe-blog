const e=JSON.parse('{"key":"v-20a78dec","path":"/posts/Vue/%E5%93%8D%E5%BA%94%E5%BC%8F%E6%95%B0%E6%8D%AE%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%AE%9E%E7%8E%B0.html","title":"响应式数据的基本实现","lang":"zh-CN","frontmatter":{"star":true,"description":"响应式数据的基本实现 在ES2015 之前，只能通过 Object.defineProperty 函数实现，这也是 Vue.js 2 所采用的方式。 兼容性好，支持IE9 tips: Vue 框架是通过遍历数组 和递归遍历对象，从而达到利用 Object.defineProperty() 也能对对象和数组（部分方法的操作）进行监听。 在 ES2015+ 中，我们可以使用代理对象 Proxy 来实现，这也是 Vue.js 3 所采用的方式。 Proxy 可以直接监听对象而非属性 可以直接监听数组的变化","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/fe-blog/posts/Vue/%E5%93%8D%E5%BA%94%E5%BC%8F%E6%95%B0%E6%8D%AE%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%AE%9E%E7%8E%B0.html"}],["meta",{"property":"og:site_name","content":"Mr.He"}],["meta",{"property":"og:title","content":"响应式数据的基本实现"}],["meta",{"property":"og:description","content":"响应式数据的基本实现 在ES2015 之前，只能通过 Object.defineProperty 函数实现，这也是 Vue.js 2 所采用的方式。 兼容性好，支持IE9 tips: Vue 框架是通过遍历数组 和递归遍历对象，从而达到利用 Object.defineProperty() 也能对对象和数组（部分方法的操作）进行监听。 在 ES2015+ 中，我们可以使用代理对象 Proxy 来实现，这也是 Vue.js 3 所采用的方式。 Proxy 可以直接监听对象而非属性 可以直接监听数组的变化"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://mister-hope.github.io/fe-blog/"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-11T07:16:57.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"响应式数据的基本实现"}],["meta",{"property":"article:author","content":"Mr.He"}],["meta",{"property":"article:modified_time","content":"2024-06-11T07:16:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"响应式数据的基本实现\\",\\"image\\":[\\"https://mister-hope.github.io/fe-blog/\\"],\\"dateModified\\":\\"2024-06-11T07:16:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.He\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"简易的Proxy","slug":"简易的proxy","link":"#简易的proxy","children":[]},{"level":2,"title":"副作用与代理对象的对应","slug":"副作用与代理对象的对应","link":"#副作用与代理对象的对应","children":[]}],"git":{"createdTime":1706604715000,"updatedTime":1718090217000,"contributors":[{"name":"hexb","email":"test@example.com","commits":1},{"name":"何雪斌","email":"hexuebin@megvii.com","commits":1}]},"readingTime":{"minutes":2.44,"words":733},"filePathRelative":"posts/Vue/响应式数据的基本实现.md","localizedDate":"2024年1月30日","excerpt":"<h1> 响应式数据的基本实现</h1>\\n<p>在ES2015 之前，只能通过 Object.defineProperty 函数实现，这也是 Vue.js 2 所采用的方式。</p>\\n<ul>\\n<li>\\n<p>兼容性好，支持IE9</p>\\n</li>\\n<li>\\n<p>tips:  Vue 框架是通过遍历数组 和递归遍历对象，从而达到利用 Object.defineProperty() 也能对对象和数组（部分方法的操作）进行监听。</p>\\n</li>\\n</ul>\\n<p>在 ES2015+ 中，我们可以使用代理对象 Proxy 来实现，这也是 Vue.js 3 所采用的方式。</p>\\n<ul>\\n<li>Proxy 可以直接监听对象而非属性</li>\\n<li>可以直接监听数组的变化</li>\\n</ul>","autoDesc":true}');export{e as data};
