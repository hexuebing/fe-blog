const n=JSON.parse(`{"key":"v-20a78dec","path":"/posts/Vue/%E5%93%8D%E5%BA%94%E5%BC%8F%E6%95%B0%E6%8D%AE%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%AE%9E%E7%8E%B0.html","title":"响应式数据的基本实现","lang":"zh-CN","frontmatter":{"star":true,"description":"响应式数据的基本实现 在ES2015 之前，只能通过 Object.defineProperty 函数实现，这也是 Vue.js 2 所采用的方式。在 ES2015+ 中，我们可以使用代理对象 Proxy 来实现，这也是 Vue.js 3 所采用的方式。 简易的Proxy // 存储副作用函数的桶 const bucket = new Set() // 原始数据 const data = { text: 'hello world' } // 对原始数据的代理 const obj = new Proxy(data, { // 拦截读取操作 get(target, key) { // 将副作用函数 effect 添加到存储副作用函数的桶中 bucket.add(activeEffect) // 返回属性值 return target[key] }, // 拦截设置操作 set(target, key, newVal) { // 设置属性值 target[key] = newVal // 把副作用函数从桶里取出并执行 bucket.forEach(fn =&gt; fn()) // 返回 true 代表设置操作成功 return true } })","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/fe-blog/posts/Vue/%E5%93%8D%E5%BA%94%E5%BC%8F%E6%95%B0%E6%8D%AE%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%AE%9E%E7%8E%B0.html"}],["meta",{"property":"og:site_name","content":"Mr.He"}],["meta",{"property":"og:title","content":"响应式数据的基本实现"}],["meta",{"property":"og:description","content":"响应式数据的基本实现 在ES2015 之前，只能通过 Object.defineProperty 函数实现，这也是 Vue.js 2 所采用的方式。在 ES2015+ 中，我们可以使用代理对象 Proxy 来实现，这也是 Vue.js 3 所采用的方式。 简易的Proxy // 存储副作用函数的桶 const bucket = new Set() // 原始数据 const data = { text: 'hello world' } // 对原始数据的代理 const obj = new Proxy(data, { // 拦截读取操作 get(target, key) { // 将副作用函数 effect 添加到存储副作用函数的桶中 bucket.add(activeEffect) // 返回属性值 return target[key] }, // 拦截设置操作 set(target, key, newVal) { // 设置属性值 target[key] = newVal // 把副作用函数从桶里取出并执行 bucket.forEach(fn =&gt; fn()) // 返回 true 代表设置操作成功 return true } })"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://mister-hope.github.io/fe-blog/"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-30T08:51:55.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"响应式数据的基本实现"}],["meta",{"property":"article:author","content":"Mr.He"}],["meta",{"property":"article:modified_time","content":"2024-01-30T08:51:55.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"响应式数据的基本实现\\",\\"image\\":[\\"https://mister-hope.github.io/fe-blog/\\"],\\"dateModified\\":\\"2024-01-30T08:51:55.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.He\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"简易的Proxy","slug":"简易的proxy","link":"#简易的proxy","children":[]},{"level":2,"title":"副作用与代理对象的对应","slug":"副作用与代理对象的对应","link":"#副作用与代理对象的对应","children":[]}],"git":{"createdTime":1706604715000,"updatedTime":1706604715000,"contributors":[{"name":"何雪斌","email":"hexuebin@megvii.com","commits":1}]},"readingTime":{"minutes":2.2,"words":659},"filePathRelative":"posts/Vue/响应式数据的基本实现.md","localizedDate":"2024年1月30日","excerpt":"<h1> 响应式数据的基本实现</h1>\\n<p>在ES2015 之前，只能通过 Object.defineProperty 函数实现，这也是 Vue.js 2 所采用的方式。在 ES2015+ 中，我们可以使用代理对象 Proxy 来实现，这也是 Vue.js 3 所采用的方式。</p>\\n<h2> 简易的Proxy</h2>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code> <span class=\\"token comment\\">// 存储副作用函数的桶</span>\\n <span class=\\"token keyword\\">const</span> bucket <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Set</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n\\n <span class=\\"token comment\\">// 原始数据</span>\\n <span class=\\"token keyword\\">const</span> data <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token literal-property property\\">text</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'hello world'</span> <span class=\\"token punctuation\\">}</span>\\n <span class=\\"token comment\\">// 对原始数据的代理</span>\\n <span class=\\"token keyword\\">const</span> obj <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Proxy</span><span class=\\"token punctuation\\">(</span>data<span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">{</span>\\n   <span class=\\"token comment\\">// 拦截读取操作</span>\\n   <span class=\\"token function\\">get</span><span class=\\"token punctuation\\">(</span>target<span class=\\"token punctuation\\">,</span> key<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n     <span class=\\"token comment\\">// 将副作用函数 effect 添加到存储副作用函数的桶中</span>\\n     bucket<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">add</span><span class=\\"token punctuation\\">(</span>activeEffect<span class=\\"token punctuation\\">)</span>\\n     <span class=\\"token comment\\">// 返回属性值</span>\\n     <span class=\\"token keyword\\">return</span> target<span class=\\"token punctuation\\">[</span>key<span class=\\"token punctuation\\">]</span>\\n   <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n   <span class=\\"token comment\\">// 拦截设置操作</span>\\n   <span class=\\"token function\\">set</span><span class=\\"token punctuation\\">(</span>target<span class=\\"token punctuation\\">,</span> key<span class=\\"token punctuation\\">,</span> newVal<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n     <span class=\\"token comment\\">// 设置属性值</span>\\n     target<span class=\\"token punctuation\\">[</span>key<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> newVal\\n     <span class=\\"token comment\\">// 把副作用函数从桶里取出并执行</span>\\n     bucket<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">forEach</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">fn</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token function\\">fn</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n     <span class=\\"token comment\\">// 返回 true 代表设置操作成功</span>\\n     <span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">true</span>\\n   <span class=\\"token punctuation\\">}</span>\\n <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
