const n=JSON.parse('{"key":"v-243521d1","path":"/posts/leetCode/%E6%95%B0%E7%BB%84/%E4%BA%8C%E5%88%86%E6%B3%95%E6%9F%A5%E6%89%BE%E4%B8%8B%E6%A0%87.html","title":"二分法查找下标","lang":"zh-CN","frontmatter":{"description":"二分法查找下标 这个问题是面试百度一面的题 假设数组已经排序 双指针实现 function findIndex(arr, target){ if(arr.length === 0) return -1 let start = 0, end = arr.length let mind = Math.floor(end/2) while(start &lt; end){ if(arr[mind] &lt; target){ start = mind + 1 mind = Math.floor((start+end)/2) }else if(arr[mind] &gt; target){ end = mind - 1 mind = Math.floor((start+end)/2) }else{ return mind } } return -1 }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/fe-blog/posts/leetCode/%E6%95%B0%E7%BB%84/%E4%BA%8C%E5%88%86%E6%B3%95%E6%9F%A5%E6%89%BE%E4%B8%8B%E6%A0%87.html"}],["meta",{"property":"og:site_name","content":"Mr.He"}],["meta",{"property":"og:title","content":"二分法查找下标"}],["meta",{"property":"og:description","content":"二分法查找下标 这个问题是面试百度一面的题 假设数组已经排序 双指针实现 function findIndex(arr, target){ if(arr.length === 0) return -1 let start = 0, end = arr.length let mind = Math.floor(end/2) while(start &lt; end){ if(arr[mind] &lt; target){ start = mind + 1 mind = Math.floor((start+end)/2) }else if(arr[mind] &gt; target){ end = mind - 1 mind = Math.floor((start+end)/2) }else{ return mind } } return -1 }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-14T01:30:08.000Z"}],["meta",{"property":"article:author","content":"Mr.He"}],["meta",{"property":"article:modified_time","content":"2024-03-14T01:30:08.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"二分法查找下标\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-14T01:30:08.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.He\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"双指针实现","slug":"双指针实现","link":"#双指针实现","children":[]}],"git":{"createdTime":1710379808000,"updatedTime":1710379808000,"contributors":[{"name":"gift","email":"test@example.com","commits":1}]},"readingTime":{"minutes":0.28,"words":85},"filePathRelative":"posts/leetCode/数组/二分法查找下标.md","localizedDate":"2024年3月14日","excerpt":"<h1> 二分法查找下标</h1>\\n<p>这个问题是面试百度一面的题</p>\\n<p>假设数组已经排序</p>\\n<h2> 双指针实现</h2>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">function</span> <span class=\\"token function\\">findIndex</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">arr<span class=\\"token punctuation\\">,</span> target</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>arr<span class=\\"token punctuation\\">.</span>length <span class=\\"token operator\\">===</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">return</span> <span class=\\"token operator\\">-</span><span class=\\"token number\\">1</span>\\n  <span class=\\"token keyword\\">let</span> start <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> end <span class=\\"token operator\\">=</span> arr<span class=\\"token punctuation\\">.</span>length\\n  <span class=\\"token keyword\\">let</span> mind <span class=\\"token operator\\">=</span> Math<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">floor</span><span class=\\"token punctuation\\">(</span>end<span class=\\"token operator\\">/</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token keyword\\">while</span><span class=\\"token punctuation\\">(</span>start <span class=\\"token operator\\">&lt;</span> end<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>arr<span class=\\"token punctuation\\">[</span>mind<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">&lt;</span> target<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n      start <span class=\\"token operator\\">=</span> mind <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span>\\n      mind <span class=\\"token operator\\">=</span> Math<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">floor</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span>start<span class=\\"token operator\\">+</span>end<span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">/</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token keyword\\">else</span> <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>arr<span class=\\"token punctuation\\">[</span>mind<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">&gt;</span> target<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n      end <span class=\\"token operator\\">=</span> mind <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span>\\n      mind <span class=\\"token operator\\">=</span> Math<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">floor</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span>start<span class=\\"token operator\\">+</span>end<span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">/</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token keyword\\">else</span><span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">return</span> mind\\n    <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token keyword\\">return</span> <span class=\\"token operator\\">-</span><span class=\\"token number\\">1</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
