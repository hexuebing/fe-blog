import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as e,c as i,f as t}from"./app-Pu1hhNQS.js";const r="/fe-blog/assets/flex container-0-woG_iu.png",n="/fe-blog/assets/Pasted Graphic 13-dTxndJFG.png",s="/fe-blog/assets/Pasted Graphic 14-6TrBptBn.png",o="/fe-blog/assets/Pasted Graphic 15-VJrPkV8D.png",l="/fe-blog/assets/Pasted Graphic 16-lAGMEt5o.png",p="/fe-blog/assets/div.box-item 33.16 x 52-Ts6AJIzw.png",g="/fe-blog/assets/Pasted Graphic 18-6xQFVMCr.png",c="/fe-blog/assets/wrap-u9Xgt1aM.png",f="/fe-blog/assets/wrap-reverse-6me7UKJ8.png",d="/fe-blog/assets/Pasted Graphic 22-2r-B99nP.png",h="/fe-blog/assets/Pasted Graphic 23-G_LQzoBg.png",u="/fe-blog/assets/Pasted Graphic 24-L6bMveaU.png",x="/fe-blog/assets/Pasted Graphic 25-ljwnuuRZ.png",_="/fe-blog/assets/Pasted Graphic 26-itG721am.png",b="/fe-blog/assets/Pasted Graphic 27-StjhRpZ-.png",m="/fe-blog/assets/Pasted Graphic 28-leOwF23b.png",w="/fe-blog/assets/Pasted Graphic 29-COuMk2rq.png",v="/fe-blog/assets/Pasted Graphic 30-_zUKGFQd.png",y="/fe-blog/assets/Pasted Graphic 32-W7A-KJ2Q.png",z="/fe-blog/assets/Pasted Graphic 31-YjuVGK9a.png",G="/fe-blog/assets/Pasted Graphic 34-q3ujPrFn.png",P="/fe-blog/assets/Pasted Graphic 33-toIogp4Z.png",k="/fe-blog/assets/div.box-item 174.67 x52-1NHZYfpo.png",j="/fe-blog/assets/div.box-item 211x52-UvUM9Yl7.png",F="/fe-blog/assets/Pasted Graphic 38-It58PFWv.png",B={},M=t('<h1 id="flex布局" tabindex="-1"><a class="header-anchor" href="#flex布局" aria-hidden="true">#</a> Flex布局</h1><p>注意：弹性布局，子元素的 float、clear 和 vertical-align 属性将失效</p><figure><img src="'+r+'" alt="布局轴" tabindex="0" loading="lazy"><figcaption>布局轴</figcaption></figure><p>默认存在两根轴：水平的主轴（main axis）和 垂直的交叉轴（cross axis）</p><h2 id="容器属性" tabindex="-1"><a class="header-anchor" href="#容器属性" aria-hidden="true">#</a> 容器属性</h2><h3 id="_1-flex-direction" tabindex="-1"><a class="header-anchor" href="#_1-flex-direction" aria-hidden="true">#</a> 1.flex-direction</h3><p>主轴的方向</p><p>row（默认值）：主轴为水平方向，起点在左端</p><figure><img src="'+n+'" alt="row" tabindex="0" loading="lazy"><figcaption>row</figcaption></figure><p>row-reverse：主轴为水平方向，起点在右端</p><figure><img src="'+s+'" alt="row-reverse" tabindex="0" loading="lazy"><figcaption>row-reverse</figcaption></figure><p>column：主轴为垂直方向，起点在上沿。</p><figure><img src="'+o+'" alt="column" tabindex="0" loading="lazy"><figcaption>column</figcaption></figure><p>column-reverse：主轴为垂直方向，起点在下沿。</p><figure><img src="'+l+'" alt="column-reverse" tabindex="0" loading="lazy"><figcaption>column-reverse</figcaption></figure><h3 id="_2-flex-wrap" tabindex="-1"><a class="header-anchor" href="#_2-flex-wrap" aria-hidden="true">#</a> 2.flex-wrap</h3><p>1）nowrap（默认）：不换行</p><figure><img src="'+p+'" alt="nowrap" tabindex="0" loading="lazy"><figcaption>nowrap</figcaption></figure><p>2）wrap：换行，第一行在上方</p><figure><img src="'+g+'" alt="wrap" tabindex="0" loading="lazy"><figcaption>wrap</figcaption></figure><p>设置容器的高度</p><figure><img src="'+c+'" alt="设置容器高度" tabindex="0" loading="lazy"><figcaption>设置容器高度</figcaption></figure><p>3）wrap-reverse：换行，第一行在下方</p><figure><img src="'+f+`" alt="wrap-reverse" tabindex="0" loading="lazy"><figcaption>wrap-reverse</figcaption></figure><h3 id="_3-flex-flow" tabindex="-1"><a class="header-anchor" href="#_3-flex-flow" aria-hidden="true">#</a> 3.flex-flow</h3><p>flex-flow属性是flex-direction属性和flex-wrap属性的简写形式</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.box</span> <span class="token punctuation">{</span>
  <span class="token property">flex-flow</span><span class="token punctuation">:</span> &lt;flex-direction&gt; || &lt;flex-wrap&gt;
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-justify-content" tabindex="-1"><a class="header-anchor" href="#_4-justify-content" aria-hidden="true">#</a> 4.justify-content</h3><p>项目在主轴上的对齐方式</p><p>flex-start（默认值）：左对齐</p><figure><img src="`+d+'" alt="flex-start" tabindex="0" loading="lazy"><figcaption>flex-start</figcaption></figure><p>flex-end：右对齐</p><figure><img src="'+h+'" alt="flex-end" tabindex="0" loading="lazy"><figcaption>flex-end</figcaption></figure><p>center: 居中</p><figure><img src="'+u+'" alt="center" tabindex="0" loading="lazy"><figcaption>center</figcaption></figure><p>space-between：两端对齐，项目之间的间隔都相等</p><figure><img src="'+x+'" alt="space-between" tabindex="0" loading="lazy"><figcaption>space-between</figcaption></figure><p>space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍</p><figure><img src="'+_+'" alt="space-around" tabindex="0" loading="lazy"><figcaption>space-around</figcaption></figure><h3 id="_5-align-items" tabindex="-1"><a class="header-anchor" href="#_5-align-items" aria-hidden="true">#</a> 5.align-items</h3><p>定义项目在交叉轴上如何对齐</p><p>flex-start：交叉轴的起点对齐</p><figure><img src="'+b+'" alt="交叉轴的起点对齐" tabindex="0" loading="lazy"><figcaption>交叉轴的起点对齐</figcaption></figure><p>flex-end：交叉轴的终点对齐</p><figure><img src="'+m+'" alt="交叉轴的终点对齐" tabindex="0" loading="lazy"><figcaption>交叉轴的终点对齐</figcaption></figure><p>center: 交叉轴的中点对齐</p><figure><img src="'+w+'" alt="交叉轴的中点对齐" tabindex="0" loading="lazy"><figcaption>交叉轴的中点对齐</figcaption></figure><p>baseline: 项目的第一行文字的基线对齐</p><figure><img src="'+v+'" alt="文字的基线对齐" tabindex="0" loading="lazy"><figcaption>文字的基线对齐</figcaption></figure><p>stretch（默认值）：如果项目未设置高度或设为auto</p><figure><img src="'+y+'" alt="默认值" tabindex="0" loading="lazy"><figcaption>默认值</figcaption></figure><p>设置高度300</p><figure><img src="'+z+'" alt="默认值" tabindex="0" loading="lazy"><figcaption>默认值</figcaption></figure><h3 id="_6-align-content" tabindex="-1"><a class="header-anchor" href="#_6-align-content" aria-hidden="true">#</a> 6.align-content</h3><h2 id="项目的属性" tabindex="-1"><a class="header-anchor" href="#项目的属性" aria-hidden="true">#</a> 项目的属性</h2><h3 id="_1-order" tabindex="-1"><a class="header-anchor" href="#_1-order" aria-hidden="true">#</a> 1.order</h3><p>order属性定义项目的排列顺序。数值越小，排列越靠前，默认为0</p><p>flex-direction: row;</p><figure><img src="'+G+'" alt="order" tabindex="0" loading="lazy"><figcaption>order</figcaption></figure><p>flex-direction: column;</p><figure><img src="'+P+'" alt="order" tabindex="0" loading="lazy"><figcaption>order</figcaption></figure><h3 id="_2-flex-grow" tabindex="-1"><a class="header-anchor" href="#_2-flex-grow" aria-hidden="true">#</a> 2.flex-grow</h3><p>flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。</p><p>所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。</p><figure><img src="'+k+'" alt="flex-grow" tabindex="0" loading="lazy"><figcaption>flex-grow</figcaption></figure><p>一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。(具体宽度占比)</p><figure><img src="'+j+'" alt="flex-grow" tabindex="0" loading="lazy"><figcaption>flex-grow</figcaption></figure><h3 id="_3-flex-shrink" tabindex="-1"><a class="header-anchor" href="#_3-flex-shrink" aria-hidden="true">#</a> 3.flex-shrink</h3><p>flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</p><h3 id="_4-flex-basic" tabindex="-1"><a class="header-anchor" href="#_4-flex-basic" aria-hidden="true">#</a> 4.flex-basic</h3><p>flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。</p><h3 id="_5-flex" tabindex="-1"><a class="header-anchor" href="#_5-flex" aria-hidden="true">#</a> 5.flex</h3><p>flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。</p><p>两个快捷值：auto (1 1 auto) 和 none (0 0 auto)</p><h3 id="_6-align-self" tabindex="-1"><a class="header-anchor" href="#_6-align-self" aria-hidden="true">#</a> 6.align-self</h3><p>align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性</p><figure><img src="'+F+'" alt="align-self" tabindex="0" loading="lazy"><figcaption>align-self</figcaption></figure><p>默认值为auto，表示继承父元素的align-items属性</p>',78),J=[M];function U(V,K){return e(),i("div",null,J)}const A=a(B,[["render",U],["__file","flex布局.html.vue"]]);export{A as default};
