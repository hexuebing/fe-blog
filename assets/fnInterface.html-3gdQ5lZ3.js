import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as n,c as s,f as e}from"./app-N74RJCnI.js";const t={},i=e(`<h1 id="函数作为interface参数定义" tabindex="-1"><a class="header-anchor" href="#函数作为interface参数定义" aria-hidden="true">#</a> 函数作为interface参数定义</h1><h1 id="无参数无返回" tabindex="-1"><a class="header-anchor" href="#无参数无返回" aria-hidden="true">#</a> 无参数无返回</h1><h2 id="example-1" tabindex="-1"><a class="header-anchor" href="#example-1" aria-hidden="true">#</a> Example 1:</h2><p>Function that does not take arguments and does not return a value:</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">interface</span> <span class="token class-name">MyClassProps</span> <span class="token punctuation">{</span>
    someProp<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    <span class="token function">onChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token keyword">extends</span> <span class="token class-name">React</span><span class="token punctuation">.</span>Component<span class="token operator">&lt;</span>MyClassProps<span class="token punctuation">,</span> MyClassState<span class="token operator">&gt;</span> <span class="token operator">...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="有参数有返回" tabindex="-1"><a class="header-anchor" href="#有参数有返回" aria-hidden="true">#</a> 有参数有返回</h1><h2 id="example-2" tabindex="-1"><a class="header-anchor" href="#example-2" aria-hidden="true">#</a> Example 2:</h2><p>Function that accepts an argument and returns a value:</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">interface</span> <span class="token class-name">MyClassProps</span> <span class="token punctuation">{</span>
    <span class="token function">onChange</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="函数可选" tabindex="-1"><a class="header-anchor" href="#函数可选" aria-hidden="true">#</a> 函数可选</h1><h2 id="example-3" tabindex="-1"><a class="header-anchor" href="#example-3" aria-hidden="true">#</a> Example 3:</h2><p>Function that is optional:</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">interface</span> <span class="token class-name">MyClassProps</span> <span class="token punctuation">{</span>
    onChange<span class="token operator">?</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
    niceProp<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="使用类型" tabindex="-1"><a class="header-anchor" href="#使用类型" aria-hidden="true">#</a> 使用类型</h1><h2 id="example-4" tabindex="-1"><a class="header-anchor" href="#example-4" aria-hidden="true">#</a> Example 4:</h2><p>Using the type keyword:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>type MyFunctionType = (name: string) =&gt; number;
interface MyClassProps {
    onChange: MyFunctionType;
    niceProp: string;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,17),p=[i];function c(l,o){return n(),s("div",null,p)}const u=a(t,[["render",c],["__file","fnInterface.html.vue"]]);export{u as default};
