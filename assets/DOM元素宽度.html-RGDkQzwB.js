import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{o,c as t,f as r}from"./app-8zIQZC5g.js";const d="/fe-blog/assets/dimensions-client-r-NQCqLK.png",i="/fe-blog/assets/dimensions-offset-nvxsD0jX.png",n={},s=r('<h1 id="dom元素宽度" tabindex="-1"><a class="header-anchor" href="#dom元素宽度" aria-hidden="true">#</a> DOM元素宽度</h1><h2 id="clientwidth" tabindex="-1"><a class="header-anchor" href="#clientwidth" aria-hidden="true">#</a> clientWidth</h2><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>该属性<strong>包括</strong>内边距（padding），但<strong>不包括</strong>边框（border）、外边距（margin）和垂直滚动条（如果存在）</p><h2 id="offsetwidth-border-box非常相似" tabindex="-1"><a class="header-anchor" href="#offsetwidth-border-box非常相似" aria-hidden="true">#</a> offsetWidth(border-box非常相似)</h2><figure><img src="'+i+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><code>offsetWidth</code> 是测量<strong>包含</strong>元素的边框 (border)、水平线上的内边距 (padding)、竖直方向滚动条 (scrollbar)（如果存在的话）、以及 CSS 设置的宽度 (width) 的值</p><p><code>box-sizing:border</code> 的时候 <code>offsetWidth</code> 其实就等于 <code>dom 元素的 width</code></p><h2 id="scrollwidth" tabindex="-1"><a class="header-anchor" href="#scrollwidth" aria-hidden="true">#</a> scrollWidth</h2><p>这个只读属性是元素内容宽度的一种度量，包括由于 <code>overflow</code> 溢出而在屏幕上不可见的内容。</p><p>宽度的测量方式与clientWidth相同：它<strong>包含</strong>元素的内边距，但<strong>不包括</strong>边框，外边距或垂直滚动条（如果存在）。它还可以包括伪元素的宽度，例如::before或::after。</p><p>如果元素的内容可以适合而<strong>不需要水平滚动条</strong>，则其<code>scrollWidth</code> == <code>clientWidth</code></p>',12),a=[s];function c(h,f){return o(),t("div",null,a)}const p=e(n,[["render",c],["__file","DOM元素宽度.html.vue"]]);export{p as default};
