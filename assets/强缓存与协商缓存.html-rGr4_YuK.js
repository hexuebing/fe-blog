import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as e,c as s,f as n}from"./app-1TN7qpaP.js";const o="/fe-blog/assets/http-cache-E5_J19i9.webp",t={},i=n('<h1 id="强缓存与协商缓存" tabindex="-1"><a class="header-anchor" href="#强缓存与协商缓存" aria-hidden="true">#</a> 强缓存与协商缓存</h1><figure><img src="'+o+`" alt="缓存命中" tabindex="0" loading="lazy"><figcaption>缓存命中</figcaption></figure><p>浏览器缓存资源可以降低资源的重复加载提升网页性能和加载速度</p><h2 id="强缓存" tabindex="-1"><a class="header-anchor" href="#强缓存" aria-hidden="true">#</a> 强缓存</h2><p>浏览器强缓存通常通过HTTP响应头中的Cache-Control和Expires字段来控制。</p><p>缓存期间，不需要请求，直接返回200状态码</p><h3 id="expires-http-1-0" tabindex="-1"><a class="header-anchor" href="#expires-http-1-0" aria-hidden="true">#</a> Expires（HTTP 1.0）</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">Expires</span><span class="token operator">:</span> Wed<span class="token punctuation">,</span> <span class="token number">22</span> Oct <span class="token number">2024</span> <span class="token number">08</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span> <span class="token constant">GTM</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>表示资源会在<code>Wed, 22 Oct 2024 08:00:00 GTM</code>过期，需要再次请求。并且Expires受限于本地时间，如果修改了本地时间，可能会导致缓存失效</p><h3 id="cache-control-http-1-1" tabindex="-1"><a class="header-anchor" href="#cache-control-http-1-1" aria-hidden="true">#</a> Cache-Control（HTTP 1.1）</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Cache<span class="token operator">-</span>control<span class="token operator">:</span> max<span class="token operator">-</span>age <span class="token operator">=</span> <span class="token number">3600</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>表示资源会在3600s后过期，需要再次请求</p><ul><li><p>Cache-Control: no-cache: 表示浏览器<strong>不直接使用缓存</strong>，需要向服务器验证资源是否过期。</p></li><li><p>Cache-Control: no-store: 表示<strong>不缓存任何内容</strong>，每次请求都需要从服务器获取资源。</p></li></ul><h2 id="协商缓存" tabindex="-1"><a class="header-anchor" href="#协商缓存" aria-hidden="true">#</a> 协商缓存</h2><p>协商缓存需要请求，如果缓存有效会返回304</p><p>当浏览器发起请求时，会在请求头中包含<strong>上一次服务器返回的响应中</strong>的<code>Last-Modified</code>字段的值（通过If-Modified-Since字段）或者<code>ETag</code>字段的值（通过If-None-Match字段）。服务器收到请求后，会根据这些值来判断资源是否发生了变化</p><h3 id="last-modified-和-if-modified-since" tabindex="-1"><a class="header-anchor" href="#last-modified-和-if-modified-since" aria-hidden="true">#</a> Last-Modified 和 If-Modified-Since</h3><p>Last-Modified表示本地文件最后修改日期，精度是秒。如果一秒内修改文件多次，就无法体现出来。</p><p><code>If-Modified-Since</code>会将<code>Last-Modified</code> 的值发送给服务器,询问服务器在该日期后资源是否有更新</p><h3 id="etag-和-if-none-match" tabindex="-1"><a class="header-anchor" href="#etag-和-if-none-match" aria-hidden="true">#</a> ETag 和 If-None-Match</h3><p>ETag类似文件指纹</p><p><code>If-None-Match</code>会将当前<code>ETag</code>发送给服务器，确认是否ETag发生变动，来确定文件是否需要重新下发</p>`,22),r=[i];function c(d,p){return e(),s("div",null,r)}const f=a(t,[["render",c],["__file","强缓存与协商缓存.html.vue"]]);export{f as default};
