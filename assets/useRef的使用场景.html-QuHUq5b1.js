const n=JSON.parse(`{"key":"v-94fb23de","path":"/posts/react/useRef%E7%9A%84%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF.html","title":"useRef的使用场景","lang":"zh-CN","frontmatter":{"description":"useRef的使用场景 ref 引用值 与 state 一样，ref 在重新渲染之间由 React 保留。但是，设置 state 会重新渲染组件，而更改 ref 不会！ import { useRef } from 'react'; export default function Counter() { let ref = useRef(0); function handleClick() { // 使用ref.current访问 ref.current = ref.current + 1; alert('你点击了 ' + ref.current + ' 次!'); } return ( &lt;button onClick={handleClick}&gt; 点我！ &lt;/button&gt; ); }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/fe-blog/posts/react/useRef%E7%9A%84%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF.html"}],["meta",{"property":"og:site_name","content":"Mr.He"}],["meta",{"property":"og:title","content":"useRef的使用场景"}],["meta",{"property":"og:description","content":"useRef的使用场景 ref 引用值 与 state 一样，ref 在重新渲染之间由 React 保留。但是，设置 state 会重新渲染组件，而更改 ref 不会！ import { useRef } from 'react'; export default function Counter() { let ref = useRef(0); function handleClick() { // 使用ref.current访问 ref.current = ref.current + 1; alert('你点击了 ' + ref.current + ' 次!'); } return ( &lt;button onClick={handleClick}&gt; 点我！ &lt;/button&gt; ); }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-02T06:20:44.000Z"}],["meta",{"property":"article:author","content":"Mr.He"}],["meta",{"property":"article:modified_time","content":"2024-04-02T06:20:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"useRef的使用场景\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-02T06:20:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.He\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"ref 引用值","slug":"ref-引用值","link":"#ref-引用值","children":[]},{"level":2,"title":"ref 操作 DOM","slug":"ref-操作-dom","link":"#ref-操作-dom","children":[]}],"git":{"createdTime":1712038844000,"updatedTime":1712038844000,"contributors":[{"name":"hexb","email":"test@example.com","commits":1}]},"readingTime":{"minutes":0.39,"words":117},"filePathRelative":"posts/react/useRef的使用场景.md","localizedDate":"2024年4月2日","excerpt":"<h1> useRef的使用场景</h1>\\n<h2> ref 引用值</h2>\\n<p>与 state 一样，ref 在重新渲染之间由 React 保留。但是，设置 state 会重新渲染组件，而更改 ref 不会！</p>\\n<div class=\\"language-jsx line-numbers-mode\\" data-ext=\\"jsx\\"><pre class=\\"language-jsx\\"><code><span class=\\"token keyword\\">import</span> <span class=\\"token punctuation\\">{</span> useRef <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">from</span> <span class=\\"token string\\">'react'</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">export</span> <span class=\\"token keyword\\">default</span> <span class=\\"token keyword\\">function</span> <span class=\\"token function\\">Counter</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">let</span> ref <span class=\\"token operator\\">=</span> <span class=\\"token function\\">useRef</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n  <span class=\\"token keyword\\">function</span> <span class=\\"token function\\">handleClick</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// 使用ref.current访问</span>\\n    ref<span class=\\"token punctuation\\">.</span>current <span class=\\"token operator\\">=</span> ref<span class=\\"token punctuation\\">.</span>current <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token function\\">alert</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'你点击了 '</span> <span class=\\"token operator\\">+</span> ref<span class=\\"token punctuation\\">.</span>current <span class=\\"token operator\\">+</span> <span class=\\"token string\\">' 次!'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n\\n  <span class=\\"token keyword\\">return</span> <span class=\\"token punctuation\\">(</span>\\n    <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>button</span> <span class=\\"token attr-name\\">onClick</span><span class=\\"token script language-javascript\\"><span class=\\"token script-punctuation punctuation\\">=</span><span class=\\"token punctuation\\">{</span>handleClick<span class=\\"token punctuation\\">}</span></span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token plain-text\\">\\n      点我！\\n    </span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>button</span><span class=\\"token punctuation\\">&gt;</span></span>\\n  <span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
