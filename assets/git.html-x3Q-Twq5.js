import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as i,f as s}from"./app-M4M9HPp6.js";const n={},d=s(`<h1 id="git常用命令" tabindex="-1"><a class="header-anchor" href="#git常用命令" aria-hidden="true">#</a> Git常用命令</h1><h2 id="创建本地分支" tabindex="-1"><a class="header-anchor" href="#创建本地分支" aria-hidden="true">#</a> 创建本地分支</h2><p>在本地创建分支dev并切换到该分支</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git checkout -b dev(本地分支名称) origin/dev(远程分支名称)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="reset" tabindex="-1"><a class="header-anchor" href="#reset" aria-hidden="true">#</a> reset</h2><p>将暂存区的commit释放</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git reset commitHash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将暂存区的内容恢复到commitHash对应的位置</p><hr><h2 id="反悔merge" tabindex="-1"><a class="header-anchor" href="#反悔merge" aria-hidden="true">#</a> 反悔merge</h2><p>reset 到 merge 前的版本</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code>git reset <span class="token operator">--</span>hard
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="squash" tabindex="-1"><a class="header-anchor" href="#squash" aria-hidden="true">#</a> squash</h2><aside> 💡 merge的时候将commit信息合并为一条 </aside><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ git merge --squash anotherbranch

$ git commit -m &quot;message here&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="cherry-pick" tabindex="-1"><a class="header-anchor" href="#cherry-pick" aria-hidden="true">#</a> cherry-pick</h2><aside> 💡 特定提交应用于其他分支 </aside><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>    a - b - c - d   Master
         \\
           e - f - g Feature
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在将提交<code>f</code>应用到<code>master</code>分支</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 切换到 master 分支</span>
$ <span class="token function">git</span> checkout master

<span class="token comment"># Cherry pick 操作</span>
$ <span class="token function">git</span> cherry-pick f
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>之后代码库就变为了</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>    a - b - c - d - f   Master
         \\
           e - f - g Feature
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="删除分支" tabindex="-1"><a class="header-anchor" href="#删除分支" aria-hidden="true">#</a> 删除分支</h2><h3 id="本地分支" tabindex="-1"><a class="header-anchor" href="#本地分支" aria-hidden="true">#</a> 本地分支：</h3><p>merge了的分支</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git branch -d branch_name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>不管它有没有merge</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git branch -D branch_name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="远程分支" tabindex="-1"><a class="header-anchor" href="#远程分支" aria-hidden="true">#</a> 远程分支:</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git push --delete origin branch_name
// 或者
git push origin :branch_name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="tag" tabindex="-1"><a class="header-anchor" href="#tag" aria-hidden="true">#</a> Tag</h2><p>本地创建tag</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git tag v1.0.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>推送到远程</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git push origin v1.0.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="暂存修改" tabindex="-1"><a class="header-anchor" href="#暂存修改" aria-hidden="true">#</a> 暂存修改</h2><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code>git stash

git stash pop
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="不跟踪" tabindex="-1"><a class="header-anchor" href="#不跟踪" aria-hidden="true">#</a> 不跟踪</h2><p>有时，我们可能希望在仓库中保留一个文件，但不再希望跟踪其更改。我们可以使用带有 <code>--skip-worktree</code>选项的 <code>git update-index</code>命令来实现这一点。</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code>git update<span class="token operator">-</span>index <span class="token operator">--</span>skip<span class="token operator">-</span>worktree file1

git update<span class="token operator">-</span>index <span class="token operator">--</span>no<span class="token operator">-</span>skip<span class="token operator">-</span>worktree file1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使 Git 假装文件的版本是最新的，而是从索引版本中读取。</p><p>可以使用以下命令来让git不跟踪某个文件：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git update-index--assume-unchanged &lt;file&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个命令会将指定的文件标记为“假定未更改”，即使文件内容发生了变化，git也不会将其标记为已修改。这个命令只会影响本地仓库，不会影响远程仓库。</p><p>如果想要让git重新跟踪某个文件，可以使用以下命令：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git update-index --no-assume-unchanged &lt;file&gt;

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这个命令会取消对指定文件的“假定未更改”标记，让git重新跟踪该文件。</p>`,47),r=[d];function t(l,c){return a(),i("div",null,r)}const v=e(n,[["render",t],["__file","git.html.vue"]]);export{v as default};
