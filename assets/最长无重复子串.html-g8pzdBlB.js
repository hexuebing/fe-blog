import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,f as t}from"./app-SM-qrYHS.js";const e={},p=t(`<h1 id="最长无覆盖子串" tabindex="-1"><a class="header-anchor" href="#最长无覆盖子串" aria-hidden="true">#</a> 最长无覆盖子串</h1><p>给定一个字符串 s ，请你找出其中不含有重复字符的 最长连续子字符串 的长度。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">输入</span><span class="token operator">:</span> s <span class="token operator">=</span> <span class="token string">&quot;abcabcbb&quot;</span>
<span class="token literal-property property">输出</span><span class="token operator">:</span> <span class="token number">3</span> 
<span class="token literal-property property">解释</span><span class="token operator">:</span> 因为无重复字符的最长子字符串是 <span class="token string">&quot;abc&quot;</span>，所以其长度为 <span class="token number">3</span>。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="滑动窗口解决" tabindex="-1"><a class="header-anchor" href="#滑动窗口解决" aria-hidden="true">#</a> 滑动窗口解决</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">s</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">lengthOfLongestSubstring</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> window <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>right <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">const</span> c <span class="token operator">=</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span>
        window<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> window<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">?</span> window<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">1</span>
        right<span class="token operator">++</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>window<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">const</span> f <span class="token operator">=</span> s<span class="token punctuation">[</span>left<span class="token punctuation">]</span>
            left<span class="token operator">++</span>
            window<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token operator">--</span>
        <span class="token punctuation">}</span>
        result <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> right<span class="token operator">-</span>left<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),o=[p];function c(l,i){return s(),a("div",null,o)}const k=n(e,[["render",c],["__file","最长无重复子串.html.vue"]]);export{k as default};
