const e=JSON.parse('{"key":"v-5194fd6f","path":"/posts/MarsCode/1.%E6%89%BE%E5%8D%95%E7%8B%AC%E7%9A%84%E6%95%B0.html","title":"1.找单独的数","lang":"zh-CN","frontmatter":{"description":"1.找单独的数 问题描述 在一个班级中，每位同学都拿到了一张卡片，上面有一个整数。有趣的是，除了一个数字之外，所有的数字都恰好出现了两次。现在需要你帮助班长小 C 快速找到那个拿了独特数字卡片的同学手上的数字是什么。 要求 设计一个算法，使其时间复杂度为 O(n)，其中 n 是班级的人数。 尽量减少额外空间的使用，以体现你的算法优化能力。 测试样例 样例 1： 输入：cards = [1, 1, 2, 2, 3, 3, 4, 5, 5] 输出：4 解释：拿到数字 4 的同学是唯一一个没有配对的。","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/fe-blog/posts/MarsCode/1.%E6%89%BE%E5%8D%95%E7%8B%AC%E7%9A%84%E6%95%B0.html"}],["meta",{"property":"og:site_name","content":"Mr.He"}],["meta",{"property":"og:title","content":"1.找单独的数"}],["meta",{"property":"og:description","content":"1.找单独的数 问题描述 在一个班级中，每位同学都拿到了一张卡片，上面有一个整数。有趣的是，除了一个数字之外，所有的数字都恰好出现了两次。现在需要你帮助班长小 C 快速找到那个拿了独特数字卡片的同学手上的数字是什么。 要求 设计一个算法，使其时间复杂度为 O(n)，其中 n 是班级的人数。 尽量减少额外空间的使用，以体现你的算法优化能力。 测试样例 样例 1： 输入：cards = [1, 1, 2, 2, 3, 3, 4, 5, 5] 输出：4 解释：拿到数字 4 的同学是唯一一个没有配对的。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-27T03:17:58.000Z"}],["meta",{"property":"article:author","content":"Mr.He"}],["meta",{"property":"article:modified_time","content":"2025-03-27T03:17:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"1.找单独的数\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-27T03:17:58.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.He\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"要求","slug":"要求","link":"#要求","children":[]},{"level":2,"title":"测试样例","slug":"测试样例","link":"#测试样例","children":[{"level":3,"title":"样例 1：","slug":"样例-1","link":"#样例-1","children":[]},{"level":3,"title":"样例 2：","slug":"样例-2","link":"#样例-2","children":[]},{"level":3,"title":"样例 3：","slug":"样例-3","link":"#样例-3","children":[]}]},{"level":2,"title":"约束条件","slug":"约束条件","link":"#约束条件","children":[]},{"level":2,"title":"第一个版本","slug":"第一个版本","link":"#第一个版本","children":[]},{"level":2,"title":"优化版本","slug":"优化版本","link":"#优化版本","children":[{"level":3,"title":"优化后的代码实现","slug":"优化后的代码实现","link":"#优化后的代码实现","children":[]}]},{"level":2,"title":"优化第二个版本","slug":"优化第二个版本","link":"#优化第二个版本","children":[{"level":3,"title":"实现思路","slug":"实现思路","link":"#实现思路","children":[]},{"level":3,"title":"代码实现","slug":"代码实现","link":"#代码实现","children":[]}]},{"level":2,"title":"或者如此实现","slug":"或者如此实现","link":"#或者如此实现","children":[]}],"git":{"createdTime":1743045478000,"updatedTime":1743045478000,"contributors":[{"name":"hexb","email":"test@example.com","commits":1}]},"readingTime":{"minutes":4.01,"words":1202},"filePathRelative":"posts/MarsCode/1.找单独的数.md","localizedDate":"2025年3月27日","excerpt":"<h1> 1.找单独的数</h1>\\n<h1> 问题描述</h1>\\n<p>在一个班级中，每位同学都拿到了一张卡片，上面有一个整数。有趣的是，除了一个数字之外，所有的数字都恰好出现了两次。现在需要你帮助班长小 C 快速找到那个拿了独特数字卡片的同学手上的数字是什么。</p>\\n<hr>\\n<h2> 要求</h2>\\n<p>设计一个算法，使其时间复杂度为 <code>O(n)</code>，其中 <code>n</code> 是班级的人数。<br>\\n尽量减少额外空间的使用，以体现你的算法优化能力。</p>\\n<hr>\\n<h2> 测试样例</h2>\\n<h3> 样例 1：</h3>\\n<p>输入：<code>cards = [1, 1, 2, 2, 3, 3, 4, 5, 5]</code><br>\\n输出：<code>4</code><br>\\n解释：拿到数字 4 的同学是唯一一个没有配对的。</p>","autoDesc":true}');export{e as data};
