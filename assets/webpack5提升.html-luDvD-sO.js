import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as n,c as s,f as e}from"./app-8zIQZC5g.js";const p={},i=e(`<h1 id="webpack5提升" tabindex="-1"><a class="header-anchor" href="#webpack5提升" aria-hidden="true">#</a> webpack5提升</h1><h2 id="持久化缓存cache" tabindex="-1"><a class="header-anchor" href="#持久化缓存cache" aria-hidden="true">#</a> 持久化缓存cache</h2><p>将构建过程的 webpack 模板进行缓存，大幅提升二次构建速度、打包速度，当构建突然中断，二次进行构建时，可以直接从缓存中拉取</p><h3 id="过时的dll-暂时这么认为" tabindex="-1"><a class="header-anchor" href="#过时的dll-暂时这么认为" aria-hidden="true">#</a> 过时的dll(暂时这么认为)</h3><p>辅助配置 dll 的插件 <code>autodll-webpack-plugin</code>，结果上面直接写了 webpack5 开箱即用的持久缓存是比 <code>dll</code>更优的解决方案。</p><h3 id="无需使用cache-loader" tabindex="-1"><a class="header-anchor" href="#无需使用cache-loader" aria-hidden="true">#</a> 无需使用cache-loader</h3><p>同样的cache-loader也无需引入</p><h2 id="减少loader的使用" tabindex="-1"><a class="header-anchor" href="#减少loader的使用" aria-hidden="true">#</a> 减少loader的使用</h2><h3 id="资源模块-asset-module" tabindex="-1"><a class="header-anchor" href="#资源模块-asset-module" aria-hidden="true">#</a> 资源模块（asset module）</h3><p>一种模块类型，它允许使用资源文件（字体，图标等）而无需配置额外 loader。</p><p>在 webpack 5 之前，通常使用：</p><ul><li><code>raw-loader </code>将文件导入为字符串</li><li><code>url-loader </code>将文件作为 data URI 内联到 bundle 中</li><li><code>file-loader</code> 将文件发送到输出目录</li></ul><p>资源模块类型(asset module type)，通过添加 4 种新的模块类型，来替换所有这些 loader：</p><ul><li>asset/resource 发送一个单独的文件并导出 URL。之前通过使用 file-loader 实现。</li><li>asset/inline 导出一个资源的 data URI。之前通过使用 url-loader 实现。</li><li>asset/source 导出资源的源代码。之前通过使用 raw-loader 实现。</li><li>asset 在导出一个 data URI 和发送一个单独的文件之间自动选择。之前通过使用 url-loader，并且配置资源体积限制实现。</li></ul><h3 id="为loader指定include" tabindex="-1"><a class="header-anchor" href="#为loader指定include" aria-hidden="true">#</a> 为loader指定include</h3><p>指定 include，减少 loader 应用范围，仅应用于最少数量的必要模块</p><h2 id="优化解析" tabindex="-1"><a class="header-anchor" href="#优化解析" aria-hidden="true">#</a> 优化解析</h2><ul><li>减少 <code>resolve.modules</code>, <code>resolve.extensions</code>, <code>resolve.mainFiles</code>, <code>resolve.descriptionFiles</code> 中条目数量，因为他们会增加文件系统调用的次数。</li><li>如果不使用 symlinks（例如 npm link 或者 yarn link），可以设置 <code>resolve.symlinks: false</code>。</li></ul><h3 id="extensions" tabindex="-1"><a class="header-anchor" href="#extensions" aria-hidden="true">#</a> extensions</h3><p>根据项目中的文件类型，定义 extensions，以覆盖 webpack 默认的 extensions，加快解析速度。</p><p>由于 webpack 的解析顺序是从左到右，因此要将使用频率高的文件类型放在左侧</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">resolve</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">extensions</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;.tsx&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;.js&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 项目只有这两种类型的文件</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="modules" tabindex="-1"><a class="header-anchor" href="#modules" aria-hidden="true">#</a> modules</h3><p>modules 表示 webpack 解析模块时需要解析的目录。指定目录可以缩小解析范围，加快解析速度</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token string">&#39;node_modules&#39;</span><span class="token punctuation">,</span>
       paths<span class="token punctuation">.</span>appSrc<span class="token punctuation">,</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="symlinks" tabindex="-1"><a class="header-anchor" href="#symlinks" aria-hidden="true">#</a> symlinks</h3><p>如果项目不使用 symlinks（例如 npm link 或者 yarn link），可以设置 resolve.symlinks: false，减少解析工作量</p><h2 id="多进程" tabindex="-1"><a class="header-anchor" href="#多进程" aria-hidden="true">#</a> 多进程</h2><h3 id="htread-loader" tabindex="-1"><a class="header-anchor" href="#htread-loader" aria-hidden="true">#</a> htread-loader</h3><p>通过 thread-loader 将耗时的 loader 放在一个独立的 worker 池中运行，加快 loader 构建速度。</p><h3 id="happypack" tabindex="-1"><a class="header-anchor" href="#happypack" aria-hidden="true">#</a> happyPack</h3><p>happypack 同样是用来设置多线程，但是在 webpack5 就不要再使用 happypack 了，官方也已经不再维护了</p><h2 id="devtool" tabindex="-1"><a class="header-anchor" href="#devtool" aria-hidden="true">#</a> devtool</h2><p>不同的 devtool 设置会导致性能差异。</p><ul><li>&quot;eval&quot; 具有最好的性能，但并不能帮助转译代码。</li><li>如果能接受稍差一些的映射质量，可以使用 cheap-source-map 变体配置提高性能。</li><li>使用 eval-source-map 变体配置进行增量编译。</li></ul><h2 id="减小打包体积" tabindex="-1"><a class="header-anchor" href="#减小打包体积" aria-hidden="true">#</a> 减小打包体积</h2><p>减少编译结果的整体大小以提高构建性能。尽量保持 chunk 体积小。</p><ul><li>使用数量更少/体积更小的库</li><li>在多页面应用程序中使用 SplitChunksPlugin。</li><li>在多页面应用程序中使用 SplitChunksPlugin，并开启 async 模式。</li><li>移除未使用的代码。</li><li>只编译当前正在开发的那些代码。</li></ul><h3 id="terserwebpackplugin-来压缩-js" tabindex="-1"><a class="header-anchor" href="#terserwebpackplugin-来压缩-js" aria-hidden="true">#</a> TerserWebpackPlugin 来压缩 JS</h3><p>webpack v5 开箱即带有最新版本的 terser-webpack-plugin</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> TerserPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;terser-webpack-plugin&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">minimize</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">minimizer</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">TerserPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="cssminimizerwebpackplugin-压缩-css" tabindex="-1"><a class="header-anchor" href="#cssminimizerwebpackplugin-压缩-css" aria-hidden="true">#</a> CssMinimizerWebpackPlugin 压缩 CSS</h3><p>这个插件使用 cssnano 优化和压缩 CSS。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> MiniCssExtractPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;mini-css-extract-plugin&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> CssMinimizerPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;css-minimizer-webpack-plugin&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">.s?css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span> <span class="token string">&#39;css-loader&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;sass-loader&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">minimizer</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token comment">// 在 webpack@5 中，你可以使用 \`...\` 语法来扩展现有的 minimizer（即 \`terser-webpack-plugin\`），将下一行取消注释</span>
      <span class="token comment">// \`...\`,</span>
      <span class="token keyword">new</span> <span class="token class-name">CssMinimizerPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="tree-shaking" tabindex="-1"><a class="header-anchor" href="#tree-shaking" aria-hidden="true">#</a> Tree Shaking</h3><h4 id="sideeffects" tabindex="-1"><a class="header-anchor" href="#sideeffects" aria-hidden="true">#</a> sideEffects</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>{
  &quot;name&quot;: &quot;your-project&quot;,
  &quot;sideEffects&quot;: false
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="按需引入" tabindex="-1"><a class="header-anchor" href="#按需引入" aria-hidden="true">#</a> 按需引入</h4><p>webpack5 sideEffects 只能清除无副作用的引用，而有副作用的引用则只能通过优化引用方式来进行 Tree Shaking。</p><h5 id="lodash" tabindex="-1"><a class="header-anchor" href="#lodash" aria-hidden="true">#</a> lodash</h5><p>lodash-es 替代 lodash，实现按需引入</p><h4 id="purgecss-webpack-plugin-对-css-tree-shaking" tabindex="-1"><a class="header-anchor" href="#purgecss-webpack-plugin-对-css-tree-shaking" aria-hidden="true">#</a> purgecss-webpack-plugin 对 CSS Tree Shaking</h4>`,52),t=[i];function l(o,c){return n(),s("div",null,t)}const u=a(p,[["render",l],["__file","webpack5提升.html.vue"]]);export{u as default};
