const t=JSON.parse('{"key":"v-07fcdedf","path":"/posts/TypeScript/%E6%B3%9B%E5%9E%8B.html","title":"泛型","lang":"zh-CN","frontmatter":{"icon":"typescript","date":"2022-01-16T00:00:00.000Z","category":["TypeScript"],"tag":["泛型"],"description":"泛型 泛型语法简介 泛型的语法为 &lt;T&gt;，其中 T 表示传入的类型 注意：通常使用单个字母来命名泛型类型。这不是语法规则，我们也可以像 TypeScript 中的任何其他类型一样命名泛型，但这种约定有助于向阅读代码的人传达泛型类型不需要特定类型。 function identity&lt;T&gt;(arg: T): T { return arg; }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/fe-blog/posts/TypeScript/%E6%B3%9B%E5%9E%8B.html"}],["meta",{"property":"og:site_name","content":"Mr.He"}],["meta",{"property":"og:title","content":"泛型"}],["meta",{"property":"og:description","content":"泛型 泛型语法简介 泛型的语法为 &lt;T&gt;，其中 T 表示传入的类型 注意：通常使用单个字母来命名泛型类型。这不是语法规则，我们也可以像 TypeScript 中的任何其他类型一样命名泛型，但这种约定有助于向阅读代码的人传达泛型类型不需要特定类型。 function identity&lt;T&gt;(arg: T): T { return arg; }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-25T07:45:28.000Z"}],["meta",{"property":"article:author","content":"Mr.He"}],["meta",{"property":"article:tag","content":"泛型"}],["meta",{"property":"article:published_time","content":"2022-01-16T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-25T07:45:28.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"泛型\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-01-16T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-25T07:45:28.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.He\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"泛型语法简介","slug":"泛型语法简介","link":"#泛型语法简介","children":[]},{"level":2,"title":"默认类型参数","slug":"默认类型参数","link":"#默认类型参数","children":[]},{"level":2,"title":"类型参数约束","slug":"类型参数约束","link":"#类型参数约束","children":[]}],"git":{"createdTime":1719301528000,"updatedTime":1719301528000,"contributors":[{"name":"hexb","email":"test@example.com","commits":1}]},"readingTime":{"minutes":1.34,"words":402},"filePathRelative":"posts/TypeScript/泛型.md","localizedDate":"2022年1月16日","excerpt":"<h1> 泛型</h1>\\n<h2> 泛型语法简介</h2>\\n<p>泛型的语法为 <code>&lt;T&gt;</code>，其中 T 表示传入的类型</p>\\n<p>注意：通常使用单个字母来命名泛型类型。这不是语法规则，我们也可以像 TypeScript 中的任何其他类型一样命名泛型，但这种约定有助于向阅读代码的人传达泛型类型不需要特定类型。</p>\\n<div class=\\"language-tsx line-numbers-mode\\" data-ext=\\"tsx\\"><pre class=\\"language-tsx\\"><code><span class=\\"token keyword\\">function</span> <span class=\\"token generic-function\\"><span class=\\"token function\\">identity</span><span class=\\"token generic class-name\\"><span class=\\"token operator\\">&lt;</span><span class=\\"token constant\\">T</span><span class=\\"token operator\\">&gt;</span></span></span><span class=\\"token punctuation\\">(</span>arg<span class=\\"token operator\\">:</span> <span class=\\"token constant\\">T</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">:</span> <span class=\\"token constant\\">T</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">return</span> arg<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{t as data};
