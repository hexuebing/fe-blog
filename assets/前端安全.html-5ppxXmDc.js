import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as s,f as t}from"./app-w-F4ET9i.js";const e={},p=t(`<h1 id="前端安全" tabindex="-1"><a class="header-anchor" href="#前端安全" aria-hidden="true">#</a> 前端安全</h1><h2 id="xss-跨站脚本攻击" tabindex="-1"><a class="header-anchor" href="#xss-跨站脚本攻击" aria-hidden="true">#</a> XSS 跨站脚本攻击</h2><p>一种代码注入攻击，本质是网站没有对恶意代码进行过滤，导致恶意代码的执行。</p><h3 id="存储型" tabindex="-1"><a class="header-anchor" href="#存储型" aria-hidden="true">#</a> 存储型</h3><p>用户提交恶意代码到网站数据库，当用户请求数据的时候，服务器将其拼接为HTML返回给用户，导致恶意代码执行</p><h3 id="反射型" tabindex="-1"><a class="header-anchor" href="#反射型" aria-hidden="true">#</a> 反射型</h3><p>构建特殊的URL，从URL获取数据之后，拼接到HTML后导致恶意代码的执行</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- http://example.com?name=&lt;script&gt;alert(1)&lt;/script&gt; --&gt;</span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>{{name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="dom型" tabindex="-1"><a class="header-anchor" href="#dom型" aria-hidden="true">#</a> DOM型</h3><p>js脚本获取用户的输入，从而导致了恶意代码的执行</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">let</span> url <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;input&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value
  content<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;a href=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&gt;链接&lt;/a&gt;</span><span class="token template-punctuation string">\`</span></span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当用户输入<code>&#39;&#39; onclick=alert(1)</code>,就可以执行这里的恶意代码</p><h2 id="csrf-跨站请求伪造" tabindex="-1"><a class="header-anchor" href="#csrf-跨站请求伪造" aria-hidden="true">#</a> CSRF 跨站请求伪造</h2><p>利用了 cookie 会在同源请求中携带发送给服务器的特点，利用用户的登录态发起恶意请求。</p>`,14),c=[p];function i(o,l){return a(),s("div",null,c)}const u=n(e,[["render",i],["__file","前端安全.html.vue"]]);export{u as default};
