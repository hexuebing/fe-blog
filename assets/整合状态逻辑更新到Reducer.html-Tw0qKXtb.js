const n=JSON.parse(`{"key":"v-0eb24890","path":"/posts/react/%E6%95%B4%E5%90%88%E7%8A%B6%E6%80%81%E9%80%BB%E8%BE%91%E6%9B%B4%E6%96%B0%E5%88%B0Reducer.html","title":"整合状态逻辑更新到Reducer","lang":"zh-CN","frontmatter":{"description":"整合状态逻辑更新到Reducer 为什么使用useReducer 当多个事件处理程序以相似的方式修改 state 时，useReducer 可以减少代码量 使用 useReducer 时， 你可以在 reducer 函数中通过打印日志的方式来观察每个状态的更新，以及为什么要更新（来自哪个 action） reducer 是一个不依赖于组件的纯函数。这就意味着你可以单独对它进行测试 提取状态逻辑更新 export default function tasksReducer(tasks, action) { switch (action.type) { case 'added': { return [ ...tasks, { id: action.id, text: action.text, done: false, }, ]; } case 'changed': { return tasks.map((t) =&gt; { if (t.id === action.task.id) { return action.task; } else { return t; } }); } case 'deleted': { return tasks.filter((t) =&gt; t.id !== action.id); } default: { throw Error('未知 action: ' + action.type); } } }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/fe-blog/posts/react/%E6%95%B4%E5%90%88%E7%8A%B6%E6%80%81%E9%80%BB%E8%BE%91%E6%9B%B4%E6%96%B0%E5%88%B0Reducer.html"}],["meta",{"property":"og:site_name","content":"Mr.He"}],["meta",{"property":"og:title","content":"整合状态逻辑更新到Reducer"}],["meta",{"property":"og:description","content":"整合状态逻辑更新到Reducer 为什么使用useReducer 当多个事件处理程序以相似的方式修改 state 时，useReducer 可以减少代码量 使用 useReducer 时， 你可以在 reducer 函数中通过打印日志的方式来观察每个状态的更新，以及为什么要更新（来自哪个 action） reducer 是一个不依赖于组件的纯函数。这就意味着你可以单独对它进行测试 提取状态逻辑更新 export default function tasksReducer(tasks, action) { switch (action.type) { case 'added': { return [ ...tasks, { id: action.id, text: action.text, done: false, }, ]; } case 'changed': { return tasks.map((t) =&gt; { if (t.id === action.task.id) { return action.task; } else { return t; } }); } case 'deleted': { return tasks.filter((t) =&gt; t.id !== action.id); } default: { throw Error('未知 action: ' + action.type); } } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-01T03:38:42.000Z"}],["meta",{"property":"article:author","content":"Mr.He"}],["meta",{"property":"article:modified_time","content":"2024-04-01T03:38:42.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"整合状态逻辑更新到Reducer\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-01T03:38:42.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.He\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"为什么使用useReducer","slug":"为什么使用usereducer","link":"#为什么使用usereducer","children":[]},{"level":2,"title":"提取状态逻辑更新","slug":"提取状态逻辑更新","link":"#提取状态逻辑更新","children":[]},{"level":2,"title":"使用Reducer","slug":"使用reducer","link":"#使用reducer","children":[]}],"git":{"createdTime":1711942722000,"updatedTime":1711942722000,"contributors":[{"name":"hexb","email":"test@example.com","commits":1}]},"readingTime":{"minutes":1.03,"words":308},"filePathRelative":"posts/react/整合状态逻辑更新到Reducer.md","localizedDate":"2024年4月1日","excerpt":"<h1> 整合状态逻辑更新到Reducer</h1>\\n<h2> 为什么使用useReducer</h2>\\n<ul>\\n<li>当多个事件处理程序以相似的方式修改 state 时，useReducer 可以减少代码量</li>\\n<li>使用 useReducer 时， 你可以在 reducer 函数中通过打印日志的方式来观察每个状态的更新，以及为什么要更新（来自哪个 action）</li>\\n<li>reducer 是一个不依赖于组件的纯函数。这就意味着你可以单独对它进行测试</li>\\n</ul>\\n<h2> 提取状态逻辑更新</h2>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">export</span> <span class=\\"token keyword\\">default</span> <span class=\\"token keyword\\">function</span> <span class=\\"token function\\">tasksReducer</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">tasks<span class=\\"token punctuation\\">,</span> action</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">switch</span> <span class=\\"token punctuation\\">(</span>action<span class=\\"token punctuation\\">.</span>type<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">case</span> <span class=\\"token string\\">'added'</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">return</span> <span class=\\"token punctuation\\">[</span>\\n        <span class=\\"token operator\\">...</span>tasks<span class=\\"token punctuation\\">,</span>\\n        <span class=\\"token punctuation\\">{</span>\\n          <span class=\\"token literal-property property\\">id</span><span class=\\"token operator\\">:</span> action<span class=\\"token punctuation\\">.</span>id<span class=\\"token punctuation\\">,</span>\\n          <span class=\\"token literal-property property\\">text</span><span class=\\"token operator\\">:</span> action<span class=\\"token punctuation\\">.</span>text<span class=\\"token punctuation\\">,</span>\\n          <span class=\\"token literal-property property\\">done</span><span class=\\"token operator\\">:</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">,</span>\\n        <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n      <span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">case</span> <span class=\\"token string\\">'changed'</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">return</span> tasks<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">map</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">t</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>t<span class=\\"token punctuation\\">.</span>id <span class=\\"token operator\\">===</span> action<span class=\\"token punctuation\\">.</span>task<span class=\\"token punctuation\\">.</span>id<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n          <span class=\\"token keyword\\">return</span> action<span class=\\"token punctuation\\">.</span>task<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">{</span>\\n          <span class=\\"token keyword\\">return</span> t<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n      <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">case</span> <span class=\\"token string\\">'deleted'</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">return</span> tasks<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">filter</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">t</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> t<span class=\\"token punctuation\\">.</span>id <span class=\\"token operator\\">!==</span> action<span class=\\"token punctuation\\">.</span>id<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">default</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">throw</span> <span class=\\"token function\\">Error</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'未知 action: '</span> <span class=\\"token operator\\">+</span> action<span class=\\"token punctuation\\">.</span>type<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
