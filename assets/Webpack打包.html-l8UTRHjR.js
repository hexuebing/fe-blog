import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as e,c as n,f as s}from"./app-wUdMfNfB.js";const l="/fe-blog/assets/progress-BgaACf_h.png",i={},o=s(`<h1 id="webpack" tabindex="-1"><a class="header-anchor" href="#webpack" aria-hidden="true">#</a> Webpack</h1><h2 id="核心概念" tabindex="-1"><a class="header-anchor" href="#核心概念" aria-hidden="true">#</a> 核心概念</h2><ul><li>入口(entry)</li><li>输出(output)</li><li>解析器（loader）</li><li>插件(plugin)</li><li>模式(mode)</li></ul><h2 id="作用" tabindex="-1"><a class="header-anchor" href="#作用" aria-hidden="true">#</a> 作用</h2><ul><li><strong>模块打包</strong>，Webpack可以将项目中的各种资源，如JavaScript、CSS、图片、字体等，视作模块，并通过loader将它们转换为合适的格式，最终打包成静态文件</li><li><strong>编译兼容</strong>，通过loader将浏览器无法直接识别的文件，比如.less,.vue,.jsx这些文件，让开发的时候能使用高效的特性和语法。</li><li><strong>构建优化</strong>，通过压缩js、CSS、图片等文件，减小文件体积，提升加载性能</li><li><strong>能力扩展</strong>，通过plugin可以进一步实现按需加载、代码压缩</li></ul><h2 id="loader作用" tabindex="-1"><a class="header-anchor" href="#loader作用" aria-hidden="true">#</a> Loader作用</h2><p>让 Webpack 能够去处理那些非 JavaScript 文件</p><p>编写Loader时要遵循单一原则，每个Loader只做一种&quot;转义&quot;工作。 每个Loader的拿到的是源文件内容（source），可以通过返回值的方式将处理后的内容输出，也可以调用<code>this.callback()</code>方法，将内容返回给webpack。 还可以通过 <code>this.async()</code>生成一个<code>callback</code>函数，再用这个callback将处理后的内容输出出去。 此外webpack还为开发者准备了开发loader的工具函数集——<code>loader-utils</code>。</p><h3 id="常见loder" tabindex="-1"><a class="header-anchor" href="#常见loder" aria-hidden="true">#</a> 常见Loder</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>babel<span class="token operator">-</span>loader：用于将<span class="token constant">ES6</span><span class="token operator">+</span>的新特性转换为<span class="token constant">ES5</span>语法，以确保代码在各种浏览器中的兼容性。

style<span class="token operator">-</span>loader 和 css<span class="token operator">-</span>loader：style<span class="token operator">-</span>loader用于将<span class="token constant">CSS</span>代码插入到<span class="token constant">HTML</span>中的style标签中，而css<span class="token operator">-</span>loader用于解析<span class="token constant">CSS</span>文件，处理其中的<span class="token keyword">import</span><span class="token function">和url</span><span class="token punctuation">(</span><span class="token punctuation">)</span>等语法。

sass<span class="token operator">-</span>loader 和 less<span class="token operator">-</span>loader：用于处理Sass和Less等<span class="token constant">CSS</span>预处理器，将其转换为普通的<span class="token constant">CSS</span>代码。

file<span class="token operator">-</span>loader 和 url<span class="token operator">-</span>loader：file<span class="token operator">-</span>loader用于处理文件，将文件复制到输出目录，并返回文件路径，而url<span class="token operator">-</span>loader可以根据文件大小将文件转换为base64编码或使用file<span class="token operator">-</span>loader处理。

image<span class="token operator">-</span>webpack<span class="token operator">-</span>loader：用于压缩图片文件，减小图片文件的体积，提高页面加载速度。

postcss<span class="token operator">-</span>loader：用于在<span class="token constant">CSS</span>中自动添加浏览器前缀，以确保<span class="token constant">CSS</span>样式在不同浏览器中的兼容性。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="plugin" tabindex="-1"><a class="header-anchor" href="#plugin" aria-hidden="true">#</a> Plugin</h2><p>plugin 会运行在 webpack 的不同阶段，贯穿整个编译周期，目的在于解决 loader 无法实现的其他事。</p><p>相对于Loader而言，Plugin的编写就灵活了许多。 webpack在运行的生命周期中会广播出许多事件，Plugin 可以监听这些事件，在合适的时机通过 Webpack 提供的 API 改变输出结果。</p><h3 id="常见plugin" tabindex="-1"><a class="header-anchor" href="#常见plugin" aria-hidden="true">#</a> 常见Plugin</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>HtmlWebpackPlugin：用于生成<span class="token constant">HTML</span>文件，并自动将打包后的资源文件（如JavaScript、<span class="token constant">CSS</span>）引入到<span class="token constant">HTML</span>中，简化了手动管理<span class="token constant">HTML</span>文件的过程。

MiniCssExtractPlugin：用于将<span class="token constant">CSS</span>提取为单独的文件，而不是将<span class="token constant">CSS</span>以style标签的形式插入到<span class="token constant">HTML</span>中，有助于减小文件体积，提高页面加载速度。

CleanWebpackPlugin：用于在每次构建前清理输出目录，确保每次构建都是从零开始，避免旧文件的干扰。

OptimizeCSSAssetsPlugin：用于优化和压缩<span class="token constant">CSS</span>代码，减小文件体积，提高页面加载速度。

BundleAnalyzerPlugin：用于分析打包后的文件大小，帮助开发者优化代码和资源，减小文件体积。

SplitChunksPlugin：用于代码分割，将公共模块提取出来，避免重复打包，提高页面加载速度。

CompressionWebpackPlugin：启用gzip，对打包后的文件进行压缩，减小文件体积，加快文件传输速度。

<span class="token literal-property property">UglifyjsWebpackPlugin</span><span class="token operator">:</span> 压缩js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="hrm原理" tabindex="-1"><a class="header-anchor" href="#hrm原理" aria-hidden="true">#</a> HRM原理</h2><p>Webpack的热更新原理是通过WebSocket建立服务器和客户端之间的通信，</p><p>监视文件变化并重新编译文件，然后将新模块代码发送给客户端，</p><p>客户端根据HMR runtime的处理结果来更新页面上的模块，实现模块的热替换。</p><p>这样开发者在修改代码时可以实时看到页面的变化，提高了开发效率。</p><h2 id="webpack的构建流程" tabindex="-1"><a class="header-anchor" href="#webpack的构建流程" aria-hidden="true">#</a> Webpack的构建流程</h2><figure><img src="`+l+'" alt="构建流程" tabindex="0" loading="lazy"><figcaption>构建流程</figcaption></figure><p>以上过程中，Webpack 会在特定的时间点广播出特定的事件，插件在监听到感兴趣的事件后会执行特定的逻辑，并且插件可以调用 Webpack 提供的 API 改变 Webpack 的运行结果</p><h3 id="如何提高webpack的构建速度" tabindex="-1"><a class="header-anchor" href="#如何提高webpack的构建速度" aria-hidden="true">#</a> 如何提高webpack的构建速度</h3><ol><li>多入口情况下，使用<code>CommonsChunkPlugin</code>来提取公共代码</li><li>通过<code>externals</code>配置来提取常用库</li><li>利用<code>DllPlugin</code>和<code>DllReferencePlugin</code>预编译资源模块 通过<code>DllPlugin</code>来对那些我们引用但是绝对不会修改的npm包来进行预编译，再通过<code>DllReferencePlugin</code>将预编译的模块加载进来。</li><li>使用<code>Happypack</code> 实现多线程加速编译</li><li>使用<code>webpack-uglify-parallel</code>来提升<code>uglifyPlugin</code>的压缩速度。 原理上webpack-uglify-parallel采用了多核并行压缩来提升压缩速度</li><li>使用<code>Tree-shaking</code>和<code>Scope Hoisting</code>来剔除多余代码</li></ol>',25),c=[o];function r(d,t){return e(),n("div",null,c)}const k=a(i,[["render",r],["__file","Webpack打包.html.vue"]]);export{k as default};
