const t=JSON.parse(`{"key":"v-44ab6c15","path":"/posts/JavaScript/new%E5%85%B3%E9%94%AE%E5%AD%97.html","title":"new关键字","lang":"zh-CN","frontmatter":{"icon":"javascript","date":"2022-01-16T00:00:00.000Z","category":["JavaScript"],"tag":["new"],"star":true,"sticky":true,"description":"new关键字 创建一个新对象 新对象内部[[Prototype]]赋值为 构造函数的prototype属性 this指向新对象 给新对象添加属性 如果返回非空对象，则返回该对象；否则，返回刚创建的对象 代码实现 function create() { \\t// 1. \\tlet obj = new Object() \\t// 2. \\tlet Con = [].shift.call(arguments) // 获取第一个参数 \\tobj.__proto__ = Con.prototype \\t// 3&amp;4 \\tlet result = Con.call(obj, ...arguments) \\t// 5 \\treturn typeof result === 'object' ? result || obj : obj }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/fe-blog/posts/JavaScript/new%E5%85%B3%E9%94%AE%E5%AD%97.html"}],["meta",{"property":"og:site_name","content":"Mr.He"}],["meta",{"property":"og:title","content":"new关键字"}],["meta",{"property":"og:description","content":"new关键字 创建一个新对象 新对象内部[[Prototype]]赋值为 构造函数的prototype属性 this指向新对象 给新对象添加属性 如果返回非空对象，则返回该对象；否则，返回刚创建的对象 代码实现 function create() { \\t// 1. \\tlet obj = new Object() \\t// 2. \\tlet Con = [].shift.call(arguments) // 获取第一个参数 \\tobj.__proto__ = Con.prototype \\t// 3&amp;4 \\tlet result = Con.call(obj, ...arguments) \\t// 5 \\treturn typeof result === 'object' ? result || obj : obj }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-25T13:46:42.000Z"}],["meta",{"property":"article:author","content":"Mr.He"}],["meta",{"property":"article:tag","content":"new"}],["meta",{"property":"article:published_time","content":"2022-01-16T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-25T13:46:42.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"new关键字\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-01-16T00:00:00.000Z\\",\\"dateModified\\":\\"2024-02-25T13:46:42.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.He\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"代码实现","slug":"代码实现","link":"#代码实现","children":[]},{"level":2,"title":"代码简化","slug":"代码简化","link":"#代码简化","children":[]}],"git":{"createdTime":1708868802000,"updatedTime":1708868802000,"contributors":[{"name":"gift","email":"test@example.com","commits":1}]},"readingTime":{"minutes":0.6,"words":179},"filePathRelative":"posts/JavaScript/new关键字.md","localizedDate":"2022年1月16日","excerpt":"<h1> new关键字</h1>\\n<ol>\\n<li>创建一个新对象</li>\\n<li>新对象内部[[Prototype]]赋值为 构造函数的prototype属性</li>\\n<li>this指向新对象</li>\\n<li>给新对象添加属性</li>\\n<li>如果返回非空对象，则返回该对象；否则，返回刚创建的对象</li>\\n</ol>\\n<h2> 代码实现</h2>\\n<div class=\\"language-jsx line-numbers-mode\\" data-ext=\\"jsx\\"><pre class=\\"language-jsx\\"><code><span class=\\"token keyword\\">function</span> <span class=\\"token function\\">create</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token comment\\">// 1.</span>\\n\\t<span class=\\"token keyword\\">let</span> obj <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Object</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token comment\\">// 2.</span>\\n\\t<span class=\\"token keyword\\">let</span> Con <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">shift</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">call</span><span class=\\"token punctuation\\">(</span>arguments<span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">// 获取第一个参数</span>\\n\\tobj<span class=\\"token punctuation\\">.</span>__proto__ <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">Con</span><span class=\\"token punctuation\\">.</span>prototype\\n\\t<span class=\\"token comment\\">// 3&amp;4</span>\\n\\t<span class=\\"token keyword\\">let</span> result <span class=\\"token operator\\">=</span> <span class=\\"token function\\">Con</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">call</span><span class=\\"token punctuation\\">(</span>obj<span class=\\"token punctuation\\">,</span> <span class=\\"token operator\\">...</span>arguments<span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token comment\\">// 5</span>\\n\\t<span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">typeof</span> result <span class=\\"token operator\\">===</span> <span class=\\"token string\\">'object'</span> <span class=\\"token operator\\">?</span> result <span class=\\"token operator\\">||</span> obj <span class=\\"token operator\\">:</span> obj\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{t as data};
