const e=JSON.parse('{"key":"v-68c444e5","path":"/posts/Nodejs/%E6%B4%8B%E8%91%B1%E6%A8%A1%E5%9E%8B.html","title":"koa 洋葱模型","lang":"zh-CN","frontmatter":{"description":"koa 洋葱模型 Koa 的洋葱模型是其核心设计模式，通过中间件的分层处理机制实现请求和响应的双向控制。其核心特征是以 next() 方法为分界点，先由外到内执行请求逻辑（Request），再由内到外执行响应逻辑（Response），形成类似洋葱的层级执行顺序[1][3][5]。 洋葱模型执行原理 中间件分层：每个中间件通过 next() 分为上下两部分： next() 前：处理请求阶段（外层到内层） next() 后：处理响应阶段（内层到外层） 执行顺序： 假设有两个中间件，执行顺序为： 中间件1请求 → 中间件2请求 → 中间件2响应 → 中间件1响应 输出结果类似 1 → 3 → 4 → 2[1][3][5]。","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/fe-blog/posts/Nodejs/%E6%B4%8B%E8%91%B1%E6%A8%A1%E5%9E%8B.html"}],["meta",{"property":"og:site_name","content":"Mr.He"}],["meta",{"property":"og:title","content":"koa 洋葱模型"}],["meta",{"property":"og:description","content":"koa 洋葱模型 Koa 的洋葱模型是其核心设计模式，通过中间件的分层处理机制实现请求和响应的双向控制。其核心特征是以 next() 方法为分界点，先由外到内执行请求逻辑（Request），再由内到外执行响应逻辑（Response），形成类似洋葱的层级执行顺序[1][3][5]。 洋葱模型执行原理 中间件分层：每个中间件通过 next() 分为上下两部分： next() 前：处理请求阶段（外层到内层） next() 后：处理响应阶段（内层到外层） 执行顺序： 假设有两个中间件，执行顺序为： 中间件1请求 → 中间件2请求 → 中间件2响应 → 中间件1响应 输出结果类似 1 → 3 → 4 → 2[1][3][5]。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-14T03:08:31.000Z"}],["meta",{"property":"article:author","content":"Mr.He"}],["meta",{"property":"article:modified_time","content":"2025-02-14T03:08:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"koa 洋葱模型\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-14T03:08:31.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.He\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[],"git":{"createdTime":1739502511000,"updatedTime":1739502511000,"contributors":[{"name":"hexb","email":"test@example.com","commits":1}]},"readingTime":{"minutes":1.97,"words":591},"filePathRelative":"posts/Nodejs/洋葱模型.md","localizedDate":"2025年2月14日","excerpt":"<h1> koa 洋葱模型</h1>\\n<p>Koa 的洋葱模型是其核心设计模式，通过中间件的分层处理机制实现请求和响应的双向控制。其核心特征是以 <code>next()</code> 方法为分界点，先由外到内执行请求逻辑（Request），再由内到外执行响应逻辑（Response），形成类似洋葱的层级执行顺序[1][3][5]。</p>\\n<hr>\\n<p>洋葱模型执行原理\\n中间件分层：每个中间件通过 <code>next()</code> 分为上下两部分：</p>\\n<ul>\\n<li><code>next()</code> 前：处理请求阶段（外层到内层）</li>\\n<li><code>next()</code> 后：处理响应阶段（内层到外层）\\n执行顺序：<br>\\n假设有两个中间件，执行顺序为：<br>\\n<code>中间件1请求 → 中间件2请求 → 中间件2响应 → 中间件1响应</code><br>\\n输出结果类似 <code>1 → 3 → 4 → 2</code>[1][3][5]。</li>\\n</ul>","autoDesc":true}');export{e as data};
