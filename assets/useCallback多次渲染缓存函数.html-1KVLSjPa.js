const n=JSON.parse(`{"key":"v-6c070558","path":"/posts/react/useCallback%E5%A4%9A%E6%AC%A1%E6%B8%B2%E6%9F%93%E7%BC%93%E5%AD%98%E5%87%BD%E6%95%B0.html","title":"useCallback在多次渲染中缓存函数","lang":"zh-CN","frontmatter":{"description":"useCallback在多次渲染中缓存函数 跳过组件的重新渲染 默认情况下，当一个组件重新渲染时， React 将递归渲染它的所有子组件，因此每当因 theme 更改时而 ProductPage 组件重新渲染时，ShippingForm 组件也会重新渲染。 import { useCallback } from 'react'; function ProductPage({ productId, referrer, theme }) { const handleSubmit = useCallback((orderDetails) =&gt; { post('/product/' + productId + '/buy', { referrer, orderDetails, }); }, [productId, referrer]); return ( &lt;div className={theme}&gt; &lt;ShippingForm onSubmit={handleSubmit} /&gt; &lt;/div&gt; ); }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/fe-blog/posts/react/useCallback%E5%A4%9A%E6%AC%A1%E6%B8%B2%E6%9F%93%E7%BC%93%E5%AD%98%E5%87%BD%E6%95%B0.html"}],["meta",{"property":"og:site_name","content":"Mr.He"}],["meta",{"property":"og:title","content":"useCallback在多次渲染中缓存函数"}],["meta",{"property":"og:description","content":"useCallback在多次渲染中缓存函数 跳过组件的重新渲染 默认情况下，当一个组件重新渲染时， React 将递归渲染它的所有子组件，因此每当因 theme 更改时而 ProductPage 组件重新渲染时，ShippingForm 组件也会重新渲染。 import { useCallback } from 'react'; function ProductPage({ productId, referrer, theme }) { const handleSubmit = useCallback((orderDetails) =&gt; { post('/product/' + productId + '/buy', { referrer, orderDetails, }); }, [productId, referrer]); return ( &lt;div className={theme}&gt; &lt;ShippingForm onSubmit={handleSubmit} /&gt; &lt;/div&gt; ); }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-02T06:05:07.000Z"}],["meta",{"property":"article:author","content":"Mr.He"}],["meta",{"property":"article:modified_time","content":"2024-04-02T06:05:07.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"useCallback在多次渲染中缓存函数\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-02T06:05:07.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.He\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"跳过组件的重新渲染","slug":"跳过组件的重新渲染","link":"#跳过组件的重新渲染","children":[]},{"level":2,"title":"useCallback中更新state,减少依赖","slug":"usecallback中更新state-减少依赖","link":"#usecallback中更新state-减少依赖","children":[]},{"level":2,"title":"Effect内部调用函数，频繁触发执行","slug":"effect内部调用函数-频繁触发执行","link":"#effect内部调用函数-频繁触发执行","children":[{"level":3,"title":"解决办法：","slug":"解决办法","link":"#解决办法","children":[]}]},{"level":2,"title":"优化自定义 Hook","slug":"优化自定义-hook","link":"#优化自定义-hook","children":[]}],"git":{"createdTime":1712037604000,"updatedTime":1712037907000,"contributors":[{"name":"hexb","email":"test@example.com","commits":2}]},"readingTime":{"minutes":2.05,"words":615},"filePathRelative":"posts/react/useCallback多次渲染缓存函数.md","localizedDate":"2024年4月2日","excerpt":"<h1> useCallback在多次渲染中缓存函数</h1>\\n<h2> 跳过组件的重新渲染</h2>\\n<p><strong>默认情况下，当一个组件重新渲染时， React 将递归渲染它的所有子组件</strong>，因此每当因 theme 更改时而 <code>ProductPage</code> 组件重新渲染时，<code>ShippingForm</code> 组件也会重新渲染。</p>\\n<div class=\\"language-jsx line-numbers-mode\\" data-ext=\\"jsx\\"><pre class=\\"language-jsx\\"><code><span class=\\"token keyword\\">import</span> <span class=\\"token punctuation\\">{</span> useCallback <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">from</span> <span class=\\"token string\\">'react'</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">function</span> <span class=\\"token function\\">ProductPage</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\"><span class=\\"token punctuation\\">{</span> productId<span class=\\"token punctuation\\">,</span> referrer<span class=\\"token punctuation\\">,</span> theme <span class=\\"token punctuation\\">}</span></span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">const</span> handleSubmit <span class=\\"token operator\\">=</span> <span class=\\"token function\\">useCallback</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">orderDetails</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token function\\">post</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'/product/'</span> <span class=\\"token operator\\">+</span> productId <span class=\\"token operator\\">+</span> <span class=\\"token string\\">'/buy'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">{</span>\\n      referrer<span class=\\"token punctuation\\">,</span>\\n      orderDetails<span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">[</span>productId<span class=\\"token punctuation\\">,</span> referrer<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n  <span class=\\"token keyword\\">return</span> <span class=\\"token punctuation\\">(</span>\\n    <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>div</span> <span class=\\"token attr-name\\">className</span><span class=\\"token script language-javascript\\"><span class=\\"token script-punctuation punctuation\\">=</span><span class=\\"token punctuation\\">{</span>theme<span class=\\"token punctuation\\">}</span></span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token plain-text\\">\\n      </span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">ShippingForm</span></span> <span class=\\"token attr-name\\">onSubmit</span><span class=\\"token script language-javascript\\"><span class=\\"token script-punctuation punctuation\\">=</span><span class=\\"token punctuation\\">{</span>handleSubmit<span class=\\"token punctuation\\">}</span></span> <span class=\\"token punctuation\\">/&gt;</span></span><span class=\\"token plain-text\\">\\n    </span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>div</span><span class=\\"token punctuation\\">&gt;</span></span>\\n  <span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
