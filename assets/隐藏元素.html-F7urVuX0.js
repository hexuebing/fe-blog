import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as n,f as t}from"./app-iOMRBwOS.js";const e={},p=t(`<h1 id="隐藏元素" tabindex="-1"><a class="header-anchor" href="#隐藏元素" aria-hidden="true">#</a> 隐藏元素</h1><h2 id="visibility-hidden" tabindex="-1"><a class="header-anchor" href="#visibility-hidden" aria-hidden="true">#</a> visibility: hidden</h2><p><code>visibility:hidden;</code>允许动画并且保留元素在屏幕上的占用空间，会留一个blank(一个空白区域)</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">visibility</span><span class="token punctuation">:</span> hidden</span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>not visible<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">visibility</span><span class="token punctuation">:</span> visible</span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>visible!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>提醒：尽量不要用visibility: visible;去显示一个嵌套的子元素，会导致父元素设置hidden失效。</p><h2 id="display-none" tabindex="-1"><a class="header-anchor" href="#display-none" aria-hidden="true">#</a> display: none</h2><p><code>display:none;</code>会导致元素完全消失，它不会占用任何空间</p><h2 id="opacity-0" tabindex="-1"><a class="header-anchor" href="#opacity-0" aria-hidden="true">#</a> opacity: 0</h2><h1 id="v-show-与-v-if" tabindex="-1"><a class="header-anchor" href="#v-show-与-v-if" aria-hidden="true">#</a> v-show 与 v-if</h1><ul><li><p>控制手段：<code>v-show</code>隐藏则是为该元素添加<code>css--display:none</code>，dom元素依旧还在。<code>v-if</code>显示隐藏是将dom元素整个添加或删除</p></li><li><p>编译过程：<code>v-if</code>切换有一个局部编译/卸载的过程，切换过程中合适地销毁和重建内部的事件监听和子组件；<code>v-show</code>只是简单的基于<strong>css切换</strong></p></li></ul><p>如果需要非常频繁地切换，则使用 v-show 较好</p><p>如果在运行时条件很少改变，则使用 v-if 较好</p>`,12),i=[p];function o(c,l){return s(),n("div",null,i)}const r=a(e,[["render",o],["__file","隐藏元素.html.vue"]]);export{r as default};
