const n=JSON.parse('{"key":"v-06303d8a","path":"/posts/ThreeJS/%E5%B1%82%E7%BA%A7%E6%A8%A1%E5%9E%8B.html","title":"层级模型","lang":"zh-CN","frontmatter":{"description":"层级模型 层级模型（树结构） 场景对象是scene是group的父对象，group是mesh1、mesh2的父对象。这样就构成了一个三层的层级结构 //创建两个网格模型mesh1、mesh2 const geometry = new THREE.BoxGeometry(20, 20, 20); const material = new THREE.MeshLambertMaterial({color: 0x00ffff}); const mesh1 = new THREE.Mesh(geometry, material); const mesh2 = new THREE.Mesh(geometry, material); mesh2.translateX(25); const group = new THREE.Group(); //把mesh1/mesh2插入到组group中，作为group的子对象 group.add(mesh1, mesh2); //把group插入到场景中作为场景子对象 scene.add(group);","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/fe-blog/posts/ThreeJS/%E5%B1%82%E7%BA%A7%E6%A8%A1%E5%9E%8B.html"}],["meta",{"property":"og:site_name","content":"Mr.He"}],["meta",{"property":"og:title","content":"层级模型"}],["meta",{"property":"og:description","content":"层级模型 层级模型（树结构） 场景对象是scene是group的父对象，group是mesh1、mesh2的父对象。这样就构成了一个三层的层级结构 //创建两个网格模型mesh1、mesh2 const geometry = new THREE.BoxGeometry(20, 20, 20); const material = new THREE.MeshLambertMaterial({color: 0x00ffff}); const mesh1 = new THREE.Mesh(geometry, material); const mesh2 = new THREE.Mesh(geometry, material); mesh2.translateX(25); const group = new THREE.Group(); //把mesh1/mesh2插入到组group中，作为group的子对象 group.add(mesh1, mesh2); //把group插入到场景中作为场景子对象 scene.add(group);"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://mister-hope.github.io/fe-blog/"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-02T08:17:49.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"层级模型"}],["meta",{"property":"article:author","content":"Mr.He"}],["meta",{"property":"article:modified_time","content":"2024-02-02T08:17:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"层级模型\\",\\"image\\":[\\"https://mister-hope.github.io/fe-blog/\\"],\\"dateModified\\":\\"2024-02-02T08:17:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.He\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"父对象旋转","slug":"父对象旋转","link":"#父对象旋转","children":[{"level":3,"title":"世界坐标vs局部坐标","slug":"世界坐标vs局部坐标","link":"#世界坐标vs局部坐标","children":[]}]},{"level":2,"title":"Object3D替代Group","slug":"object3d替代group","link":"#object3d替代group","children":[]},{"level":2,"title":"模型命名","slug":"模型命名","link":"#模型命名","children":[{"level":3,"title":"查找模型","slug":"查找模型","link":"#查找模型","children":[]}]},{"level":2,"title":"模型移除/显隐","slug":"模型移除-显隐","link":"#模型移除-显隐","children":[]}],"git":{"createdTime":1706861869000,"updatedTime":1706861869000,"contributors":[{"name":"何雪斌","email":"hexuebin@megvii.com","commits":1}]},"readingTime":{"minutes":2.99,"words":896},"filePathRelative":"posts/ThreeJS/层级模型.md","localizedDate":"2024年2月2日","excerpt":"<h1> 层级模型</h1>\\n<figure><figcaption>层级模型（树结构）</figcaption></figure>\\n<p>场景对象是scene是group的父对象，group是mesh1、mesh2的父对象。这样就构成了一个三层的层级结构</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token comment\\">//创建两个网格模型mesh1、mesh2</span>\\n<span class=\\"token keyword\\">const</span> geometry <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">THREE<span class=\\"token punctuation\\">.</span>BoxGeometry</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">20</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">20</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">20</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">const</span> material <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">THREE<span class=\\"token punctuation\\">.</span>MeshLambertMaterial</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">{</span><span class=\\"token literal-property property\\">color</span><span class=\\"token operator\\">:</span> <span class=\\"token number\\">0x00ffff</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">const</span> mesh1 <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">THREE<span class=\\"token punctuation\\">.</span>Mesh</span><span class=\\"token punctuation\\">(</span>geometry<span class=\\"token punctuation\\">,</span> material<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">const</span> mesh2 <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">THREE<span class=\\"token punctuation\\">.</span>Mesh</span><span class=\\"token punctuation\\">(</span>geometry<span class=\\"token punctuation\\">,</span> material<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\nmesh2<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">translateX</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">25</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">const</span> group <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">THREE<span class=\\"token punctuation\\">.</span>Group</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token comment\\">//把mesh1/mesh2插入到组group中，作为group的子对象</span>\\ngroup<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">add</span><span class=\\"token punctuation\\">(</span>mesh1<span class=\\"token punctuation\\">,</span> mesh2<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token comment\\">//把group插入到场景中作为场景子对象</span>\\nscene<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">add</span><span class=\\"token punctuation\\">(</span>group<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
